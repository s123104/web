{
  "learning": [
    {
      "number": 1,
      "title": "HTML 語意化標籤應用",
      "description": "從最基本的 HTML 語意化標籤開始，就像認識各種食材一樣，讓網頁結構更有層次並提升 SEO。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹 HTML 中常用的語意化標籤（如 <header>、<nav>、<article>、<footer>）的用途與使用情境，並提供一段實際的程式碼範例來展示如何使用這些標籤進行頁面佈局。最後，請出一道小考題：\"請說明何時應使用 <section> 與 <article>？\"。如果有疑問，請附上你的程式碼［請在此處貼上程式碼］。"
    },
    {
      "number": 2,
      "title": "CSS Flexbox 布局技巧",
      "description": "Flexbox 就像魔法般讓元素優雅排列，讓頁面佈局如同芭蕾舞般流暢。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹 CSS Flexbox 的基本概念與常用屬性（如 flex-direction、justify-content、align-items），並附上一個完整的響應式佈局範例。最後，請出題：\"如何調整項目之間的間距？\"。有問題時，請附上［請在此處貼上程式碼］。"
    },
    {
      "number": 3,
      "title": "CSS Grid 網格系統應用",
      "description": "使用 CSS Grid 就像規劃房間分區，能建立複雜佈局並充分利用空間。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請解釋 CSS Grid 的基本原理，介紹 grid-template-columns、grid-gap 等屬性的用途，並展示一個多欄位網頁佈局的程式範例。最後，出一道考題：\"Grid 與 Flexbox 的主要差異是什麼？\"。若有疑問，請附上［請在此處貼上程式碼］。"
    },
    {
      "number": 4,
      "title": "JavaScript 基礎 - 變數與資料型態",
      "description": "學習 JS 的基本資料型態與變數，就像熟悉各種料理原料，是進行後續烹調的基礎。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹 JavaScript 中的基本資料型態（Number、String、Boolean、Null、Undefined）以及變數宣告方式（var、let、const），並附上範例程式碼。最後，請出考題：\"請解釋 let 與 const 的主要差異？\"。有疑問時請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 5,
      "title": "JavaScript 基礎 - 控制流程與迴圈",
      "description": "控制流程與迴圈語句就像掌握烹飪步驟與火候，使程式邏輯井然有序。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹 JavaScript 中 if/else、switch、for 與 while 迴圈的用法，並附上一個具體的範例程式碼。最後，請出一道考題：\"請舉例說明何時使用 while 迴圈較為適合？\"。遇到疑問時，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 6,
      "title": "JavaScript 進階 - 函式與作用域",
      "description": "函式與作用域就像各種烹飪技巧，理解它們能讓你的程式碼更有模組化與層次。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請解釋 JavaScript 中函式的定義（包括匿名函式與箭頭函式）、作用域與閉包的概念，並提供一段實際程式碼範例。最後，請出考題：\"什麼是閉包，並舉例說明其應用情境？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 7,
      "title": "JavaScript 進階 - 非同步程式設計",
      "description": "非同步程式設計就像多道菜同時烹飪，透過回呼、Promise 與 async/await 協調各步驟。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹 JavaScript 中非同步處理的方式：回呼函式、Promise 以及 async/await，並附上一個實際範例程式碼。最後，請出考題：\"async/await 如何改善回呼地獄問題？\"。有疑問時請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 8,
      "title": "JavaScript 進階 - 錯誤處理機制",
      "description": "錯誤處理機制就像在烹飪中預防意外發生，確保程式能穩定運行。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 try/catch/finally 處理錯誤，並附上範例程式碼展示如何捕捉並處理錯誤。最後，請出考題：\"如何根據錯誤類型實作不同的錯誤處理策略？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 9,
      "title": "JavaScript 進階 - DOM 操作實戰",
      "description": "動態操作 DOM 就像即時調整料理擺盤，讓網頁內容能隨需求變更。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用原生 JavaScript 操作 DOM，包括新增、修改及刪除元素，並附上完整範例程式碼。最後，請出考題：\"如何在效能與易讀性間取得平衡？\"。若遇到疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 10,
      "title": "JavaScript 進階 - 事件監聽與事件委派",
      "description": "設定事件監聽與委派就像安排服務流程，讓網頁互動更靈活流暢。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請解釋如何使用 addEventListener 設定事件監聽，以及事件委派的概念與優點，並附上相應的程式碼範例。最後，請出考題：\"請舉例說明事件委派的實際應用場景。\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 11,
      "title": "前端工具 - Git 版本控制實戰",
      "description": "學習 Git 就像記錄每次烹飪改良的日誌，讓版本管理與團隊協作更得心應手。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請詳細說明如何使用 Git（init、commit、branch、merge、push）進行版本控制，並附上實際案例與程式碼範例。最後，請出考題：\"如何解決常見的版本衝突？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 12,
      "title": "前端工具 - npm 與 yarn 套件管理",
      "description": "npm 與 yarn 就像管理廚房食材庫存的工具，讓你輕鬆安裝與更新各種套件。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 npm 或 yarn 進行套件安裝、更新與管理，並附上常用命令的範例。最後，請出考題：\"npm 與 yarn 在效能上有何差異？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 13,
      "title": "前端工具 - 使用 Webpack 打包專案",
      "description": "Webpack 就像把各種食材打包成一份豐盛大餐，實現資源的模組化管理。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請解釋 Webpack 的基本原理與配置方法，並展示如何撰寫 webpack.config.js 打包一個小專案。最後，請出考題：\"如何透過設定優化打包速度？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 14,
      "title": "前端工具 - Babel 轉譯現代語法",
      "description": "Babel 就像是將國際名菜轉換成在地口味，讓現代 ES6+ 語法適用於各種瀏覽器。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹 Babel 的作用與基本配置方法，並展示如何轉譯 ES6 語法的範例程式碼。最後，請出考題：\"轉譯前後程式碼有何主要差異？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 15,
      "title": "前端工具 - ESLint 與程式碼風格檢查",
      "description": "ESLint 就像是品管員，確保你的程式碼風格統一、品質過關。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請說明如何設定 ESLint 來檢查程式碼風格，並提供一個 .eslintrc 配置檔的範例。最後，請出考題：\"如何根據團隊需求自訂 ESLint 規則？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 16,
      "title": "React 入門 - 基本概念與環境搭建",
      "description": "學習 React 就像學做一道經典家常菜，從建立專案開始，逐步了解元件的奧妙。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請解釋 React 的核心概念及優點，並示範如何使用 Create React App 建立新專案，附上實際操作步驟與程式碼範例。最後，請出考題：\"Create React App 建立專案後，目錄結構各部分分別代表什麼含義？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 17,
      "title": "React 入門 - 理解 JSX 與元件組成",
      "description": "JSX 就像一個神奇的魔法配方，讓你能直觀地將食材組合成美味佳餚（元件）。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹 JSX 的基本語法及其在 React 中的應用，並附上一個簡單的元件組合範例。最後，請出考題：\"JSX 如何幫助我們更方便撰寫 HTML 樣板？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 18,
      "title": "React 入門 - Props 與狀態管理",
      "description": "props 與 state 就像料理中的配料與調味，分別負責傳遞與管理資料，讓元件更生動。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請詳細說明 React 中 props 與 state 的概念與應用，並附上一個示例程式碼來展示如何使用它們。最後，請出考題：\"請舉例說明在什麼情況下使用 state 更合適？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 19,
      "title": "React 入門 - 元件事件處理",
      "description": "元件事件處理就像根據顧客反饋即時調整菜色，使使用者互動更生動自然。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何在 React 元件中設定事件處理（如 onClick、onChange），並附上一個互動範例程式碼。最後，請出考題：\"如何避免事件處理中常見的錯誤？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 20,
      "title": "React 入門 - 元件樣式設計",
      "description": "為元件設計樣式就像藝術家為畫作上色，讓介面既美觀又具功能性。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請比較內聯樣式、CSS 模組與 styled-components 的使用方式與優缺點，並附上各自的範例程式碼。最後，請出考題：\"在什麼情況下適合選用 CSS 模組？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 21,
      "title": "React 中級 - 使用 useState 與 useEffect",
      "description": "useState 與 useEffect 就像調控火候與準備配料，使元件能根據資料變化自動更新。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請詳細說明 useState 與 useEffect 的工作原理及常見用法，並以計數器或 API 呼叫範例展示。最後，請出考題：\"如何正確設定 useEffect 的依賴陣列？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 22,
      "title": "React 中級 - 創建自訂 Hook (usePrevious)",
      "description": "自訂 Hook 就像發明獨家醬料，能封裝重複邏輯，提升程式碼重用性。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請示範如何創建一個自訂 Hook（例如 usePrevious，用於記錄上一個狀態），並提供實際範例程式碼。最後，請出考題：\"請舉例說明 usePrevious 的應用情境？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 23,
      "title": "React 中級 - 實作自訂 useDebounce Hook",
      "description": "防抖處理就像在熱鍋上等待食材落穩，避免重複觸發，提升效能。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何實作一個 useDebounce Hook，並附上實際範例程式碼。最後，請出考題：\"防抖在使用者輸入中有何應用？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 24,
      "title": "React 中級 - 使用 useThrottle Hook 限制函數調用",
      "description": "函數節流就像控制烹飪速度，確保操作不會超載，讓應用更穩定。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 useThrottle Hook 限制函數調用頻率，並附上一個範例程式碼。最後，請出考題：\"節流與防抖有何不同？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 25,
      "title": "React 中級 - 利用 React.memo 進行元件記憶化",
      "description": "React.memo 能記住元件輸出，避免不必要的重渲染，就像儲存常用菜譜提高效率。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 React.memo 優化元件渲染，並附上一個範例程式碼。最後，請出考題：\"React.memo 的原理是什麼？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 26,
      "title": "React 中級 - 使用 useMemo 優化計算型元件",
      "description": "useMemo 能快取運算結果，就像預先準備好半成品，節省重複計算的時間。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 useMemo 快取運算結果，並附上一個具體範例程式碼。最後，請出考題：\"如何判斷哪些運算需要快取？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 27,
      "title": "React 中級 - 利用 useCallback 優化函數記憶化",
      "description": "useCallback 能記住函數實例，避免重複建立，就像保存秘製調料的配方。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 useCallback 優化函數傳遞，並附上一個範例程式碼。最後，請出考題：\"在何種情況下應使用 useCallback？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 28,
      "title": "React 進階 - 實作 Lazy Loading 與 Code Splitting",
      "description": "利用 Lazy Loading 分割程式碼，讓應用初始載入更快，就像按需供應餐點一樣。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 React.lazy 與 Suspense 實作 Lazy Loading 與 Code Splitting，並提供一個完整範例程式碼。最後，請出考題：\"懶加載對初次載入速度有何影響？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 29,
      "title": "React 進階 - 利用 React.lazy 與 Suspense 加速初始載入",
      "description": "React.lazy 與 Suspense 能動態載入元件，猶如根據訂單現做菜餚，提升載入速度。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 React.lazy 與 Suspense 實現元件動態載入，並附上完整範例程式碼。最後，請出考題：\"如何設計一個吸引人的載入動畫介面？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 30,
      "title": "React 進階 - 使用 Error Boundary 捕捉錯誤並顯示備用 UI",
      "description": "Error Boundary 能捕捉子元件錯誤，保護應用就像設置安全網，避免系統崩潰。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何在 React 中實作 Error Boundary，並附上一個示例程式碼。最後，請出考題：\"Error Boundary 的最佳應用場景是什麼？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 31,
      "title": "React 進階 - 整合 styled-components 實現動態樣式",
      "description": "styled-components 讓你以 JavaScript 管理 CSS，就像調製專屬醬汁，讓元件風格動態變化。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 styled-components 在 React 中創建動態樣式，並附上一個範例程式碼。最後，請出考題：\"styled-components 如何幫助組件重用？\"。若有疑問，請貼上［請在此處貼上程式碼］。"
    },
    {
      "number": 32,
      "title": "React 進階 - 使用 Emotion 實現 CSS in JS",
      "description": "Emotion 是另一種 CSS in JS 解決方案，就像提供多種調味品讓你的 UI 更豐富多彩。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 Emotion 在 React 中撰寫 CSS，並附上實際範例程式碼。最後，請出考題：\"Emotion 與 styled-components 有何不同？\"。"
    },
    {
      "number": 33,
      "title": "React 進階 - 使用 Tailwind CSS 快速構建響應式介面",
      "description": "Tailwind CSS 提供豐富的工具類別，就像一組萬用烹飪工具，讓你快速搭建美觀介面。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何在 React 專案中整合 Tailwind CSS，並附上一個響應式介面範例程式碼。最後，請出考題：\"如何自訂 Tailwind 配置以符合品牌需求？\"。"
    },
    {
      "number": 34,
      "title": "React 進階 - 整合 Ant Design 建立專業 UI",
      "description": "Ant Design 提供一整套企業級 UI 元件，就像高級餐廳的精美擺盤，讓介面更專業。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何在 React 專案中整合 Ant Design，並附上使用其元件的範例程式碼。最後，請出考題：\"如何自訂 Ant Design 主題以匹配品牌風格？\"。"
    },
    {
      "number": 35,
      "title": "React 進階 - 利用 Material-UI 自訂主題",
      "description": "Material-UI 提供高度可定制的元件庫，就像精心設計的品牌視覺，讓整體風格統一。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Material-UI 設定並自訂主題，並附上範例程式碼。最後，請出考題：\"Material-UI 主題如何幫助統一應用風格？\"。"
    },
    {
      "number": 36,
      "title": "React 進階 - 使用 BootstrapCDN 加速 CSS 載入",
      "description": "透過 BootstrapCDN 快速載入 Bootstrap 樣式，就像快速取得必需的烹飪工具，提升頁面效能。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請說明如何在 React 專案中利用 BootstrapCDN 載入 Bootstrap 樣式，並附上範例程式碼。最後，請出考題：\"使用 CDN 有哪些優點？\"。"
    },
    {
      "number": 37,
      "title": "React 進階 - 整合 FontAwesome 提供精美圖標",
      "description": "FontAwesome 提供大量精美圖標，就像餐廳精選的裝飾元素，讓介面更具視覺吸引力。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何在 React 專案中整合 FontAwesome，並展示如何使用圖標的範例程式碼。最後，請出考題：\"FontAwesome 在 UI 設計中扮演什麼角色？\"。"
    },
    {
      "number": 38,
      "title": "React 進階 - 使用 Google Fonts 增強文字設計",
      "description": "Google Fonts 讓你輕鬆選擇各式字型，就像選擇精美餐具，為介面增添質感。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何在 React 專案中整合 Google Fonts，並附上使用字型的範例程式碼。最後，請出考題：\"如何選擇適合品牌的字型？\"。"
    },
    {
      "number": 39,
      "title": "React 進階 - 利用 Framer Motion 為元件添加動畫效果",
      "description": "Framer Motion 能為元件添加流暢動畫，就像廚師精心調配的視覺盛宴，吸引用戶目光。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Framer Motion 為 React 元件添加動畫效果，並附上具體範例程式碼。最後，請出考題：\"如何根據用戶互動調整動畫參數？\"。"
    },
    {
      "number": 40,
      "title": "React 進階 - 使用 React Spring 實作流暢動畫",
      "description": "React Spring 提供物理驅動的動畫效果，就像自然流暢的水流，為介面增添活力。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 React Spring 實現動畫效果，並附上範例程式碼。最後，請出考題：\"React Spring 如何模擬真實物理運動？\"。"
    },
    {
      "number": 41,
      "title": "React 中級 - 實作自訂 Formik 表單處理與驗證",
      "description": "Formik 幫助你簡化表單狀態管理與驗證，就像標準化食譜，讓表單操作更流暢。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Formik 處理表單狀態與驗證，結合 Yup 進行驗證，並附上具體範例程式碼。最後，請出考題：\"Formik 如何簡化表單處理流程？\"。"
    },
    {
      "number": 42,
      "title": "React 中級 - 整合 Yup 進行表單驗證",
      "description": "Yup 提供簡潔的物件驗證功能，就像細緻檢查每道菜的調味比例，確保資料正確。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何整合 Yup 與 Formik 實現表單驗證，並附上具體範例程式碼。最後，請出考題：\"Yup 如何描述複雜的驗證規則？\"。"
    },
    {
      "number": 43,
      "title": "React 中級 - 使用 React Hook Form 快速建立表單",
      "description": "React Hook Form 提供高效輕量的表單管理，就像使用自動化工具快速完成重複工作。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 React Hook Form 建立與管理表單，並附上範例程式碼。最後，請出考題：\"React Hook Form 與其他表單庫相比有何優勢？\"。"
    },
    {
      "number": 44,
      "title": "React 進階 - 使用 Axios 進行 REST API 請求",
      "description": "Axios 是一個輕量級 HTTP 請求庫，就像快速配送新鮮食材，確保資料即時送達。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Axios 發送 REST API 請求，並附上一個具體範例程式碼。最後，請出考題：\"Axios 如何處理請求錯誤？\"。"
    },
    {
      "number": 45,
      "title": "React 進階 - 使用 Fetch API 實作資料請求",
      "description": "Fetch API 是瀏覽器原生的資料請求方法，就像直接向市場採購食材，操作簡單直觀。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Fetch API 發送 HTTP 請求，並附上一個簡單範例程式碼。最後，請出考題：\"如何使用 Fetch 處理錯誤回應？\"。"
    },
    {
      "number": 46,
      "title": "React 進階 - 整合 GraphQL 與 Apollo Client",
      "description": "GraphQL 讓前端按需請求資料，就像提供豐富菜單選項，Apollo Client 負責資料管理與快取。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Apollo Client 連接 GraphQL API，並附上查詢與變更的範例程式碼。最後，請出考題：\"GraphQL 與 RESTful API 的主要差異是什麼？\"。"
    },
    {
      "number": 47,
      "title": "React 進階 - 使用 Apollo Client 進行資料快取",
      "description": "Apollo Client 可自動快取資料，就像建立食材冷藏庫，確保數據隨時更新。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何利用 Apollo Client 實現資料快取與同步，並附上範例程式碼。最後，請出考題：\"快取策略如何影響資料一致性？\"。"
    },
    {
      "number": 48,
      "title": "React 進階 - 實作基於 WebSocket 的即時更新",
      "description": "WebSocket 提供持久連線，讓資料能夠即時更新，就像廚房即時通報訂單狀態。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 WebSocket 在 React 應用中實現即時更新功能，並附上一個簡單範例程式碼。最後，請出考題：\"WebSocket 如何保持連線穩定？\"。"
    },
    {
      "number": 49,
      "title": "React 進階 - 利用 Socket.io 建立即時通訊功能",
      "description": "Socket.io 能建立雙向通訊，就像餐廳中前後台即時聯絡，確保訊息快速傳遞。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Socket.io 在 React/Node.js 應用中實現即時通訊功能，並附上具體範例程式碼。最後，請出考題：\"如何管理多用戶訊息廣播？\"。"
    },
    {
      "number": 50,
      "title": "React 進階 - 使用 Firebase Firestore 進行資料存取",
      "description": "Firebase Firestore 是即時資料庫，就像隨時更新的食材庫存，方便資料讀取與更新。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何在 React 應用中整合 Firebase Firestore 進行資料存取，並附上一個範例程式碼。最後，請出考題：\"Firestore 的資料同步機制如何運作？\"。"
    }
  ],
  "practicalApplication": [
    {
      "number": 1,
      "title": "企業官網設計與開發",
      "description": "打造專業企業官網，就像建立企業形象展示櫥窗，讓品牌形象大放異彩。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成企業官網的完整程式碼：\n1. 頁面結構（首頁、關於我們、服務介紹、聯絡表單等）\n2. 配色方案與字體風格\n3. 互動效果（滑動、懸停效果）\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 2,
      "title": "電子商務平台前端開發",
      "description": "打造電子商務平台前端頁面，就像設計一個完善的購物中心，讓用戶購物無障礙。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成電子商務平台前端程式碼，要求：\n1. 產品展示頁\n2. 購物車功能\n3. 結帳流程與客戶評價\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 3,
      "title": "線上部落格系統開發",
      "description": "建立線上部落格平台，讓用戶能輕鬆發布與管理文章，就像自媒體人的個人網誌。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成線上部落格系統程式碼，功能包括：\n1. 前台文章展示\n2. 後台文章管理\n3. 評論與互動\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 4,
      "title": "線上教育平台系統",
      "description": "打造線上教育平台，整合影片播放、課程管理、測驗與討論區，猶如一所數位化學校。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成線上教育平台程式碼，要求：\n1. 影片播放與課程上傳\n2. 在線測驗與自動評分\n3. 討論區功能\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 5,
      "title": "社交媒體互動平台開發",
      "description": "建立社交媒體平台，支援動態消息發布、好友追蹤與評論互動，就像打造一個熱鬧的線上社群。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成社交媒體互動平台程式碼，功能包括：\n1. 動態消息發布\n2. 好友追蹤\n3. 評論與互動\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 6,
      "title": "任務管理工具開發",
      "description": "設計類似 Trello 的任務管理工具，支援拖拉排序、分組與即時同步，就像一個數位工作板。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成任務管理工具程式碼，要求：\n1. 拖拉排序\n2. 任務分組\n3. 即時同步功能\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 7,
      "title": "預約與票務系統開發",
      "description": "打造活動預約與票務平台，涵蓋座位選擇、訂單管理與支付流程，猶如線上訂票系統。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成預約與票務系統程式碼，功能需包含：\n1. 座位選擇\n2. 訂單管理\n3. 支付整合\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 8,
      "title": "企業內部 CRM 系統",
      "description": "建立企業 CRM 系統，支援資料管理、聯絡記錄與報表分析，就像企業的智慧大腦。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成 CRM 系統程式碼，要求：\n1. 前後端資料管理\n2. 客戶聯絡記錄\n3. 報表與數據分析\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 9,
      "title": "在線客服系統開發",
      "description": "打造在線客服平台，支援即時聊天與自動回覆，就像 24 小時專業客服中心。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成在線客服系統程式碼，功能包括：\n1. 前端聊天介面\n2. 自動回覆與工單管理\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 10,
      "title": "即時通訊應用開發",
      "description": "建立即時通訊應用，支援文字、圖片與檔案傳輸，就像打造一款線上聊天軟體。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成即時通訊應用程式碼，功能需包含：\n1. 前端訊息介面\n2. 訊息傳輸與同步\n3. 檔案分享\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 11,
      "title": "線上論壇系統開發",
      "description": "建立線上論壇平台，支援分區、主題發布與回覆互動，就像一個熱鬧的網路社群。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成線上論壇系統程式碼，功能包括：\n1. 論壇分區與分類\n2. 主題發布與編輯\n3. 回覆互動\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 12,
      "title": "旅遊景點介紹平台",
      "description": "打造旅遊資訊網站，展示景點介紹、用戶評論與行程規劃，就像一份精美的旅遊指南。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成旅遊景點介紹平台程式碼，功能要求：\n1. 景點資訊展示\n2. 用戶評論\n3. 行程規劃與推薦\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 13,
      "title": "多語系國際化網站開發",
      "description": "建立支援多語言切換的網站，讓全球用戶輕鬆瀏覽，就像提供多國語言的菜單。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成多語系國際化網站程式碼，功能需包含：\n1. 語言切換\n2. 國際化資源管理\n3. UI 調整\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 14,
      "title": "響應式企業網站開發",
      "description": "打造一個自適應各種設備的企業網站，猶如一張數位名片，展現品牌魅力。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成響應式企業網站程式碼，要求：\n1. 桌面與行動裝置介面\n2. 自動適應各解析度\n3. 品牌風格一致\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 15,
      "title": "數據可視化儀表板開發",
      "description": "建立數據儀表板，利用圖表展示即時數據與統計資訊，就像企業營運狀況的控制面板。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成數據可視化儀表板程式碼，功能需包含：\n1. 數據收集與更新\n2. 圖表展示（折線圖、柱狀圖等）\n3. 報表生成\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 16,
      "title": "部落格後台管理系統",
      "description": "建立部落格後台管理系統，方便管理文章、用戶與評論，就像後廚高效管理食材。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成部落格後台管理系統程式碼，功能包括：\n1. 文章管理與編輯\n2. 用戶管理\n3. 評論審核\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 17,
      "title": "在線投票與問卷調查平台",
      "description": "建立在線投票與問卷平台，支援數據統計與結果展示，就像市場調查工具一樣實用。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成在線投票與問卷調查平台程式碼，要求：\n1. 投票與問卷設計\n2. 數據收集與統計\n3. 結果展示\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 18,
      "title": "在線預約與排程系統",
      "description": "建立在線預約與排程系統，適用於醫院、美容院等服務場所，就像線上訂位平台。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成在線預約與排程系統程式碼，功能需包含：\n1. 預約流程與訂位\n2. 時間排程與日曆視圖\n3. 提醒通知\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 19,
      "title": "社交活動組織平台",
      "description": "建立社交活動平台，方便用戶發布活動、報名與互動，就像社區活動公告欄。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成社交活動組織平台程式碼，要求：\n1. 活動發布與管理\n2. 用戶報名與互動\n3. 活動通知\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 20,
      "title": "在線客服與工單管理系統",
      "description": "建立在線客服與工單管理系統，提升售後服務品質，就像一個專業客服中心。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成在線客服與工單管理系統程式碼，功能包括：\n1. 客戶諮詢與聊天\n2. 工單建立與追蹤\n3. 自動回覆與通知\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 21,
      "title": "移動端應用 UI 設計",
      "description": "打造移動端應用介面，就像為行動餐車設計專屬菜單，強調直觀與易用。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成移動端應用 UI 程式碼，要求：\n1. 原型設計與版面規劃\n2. 用戶直觀介面\n3. 適配各種移動裝置\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 22,
      "title": "桌面應用程式界面設計 (Electron)",
      "description": "建立基於 Electron 的桌面應用程式，具備直觀、易用的介面，就像設計一款高端辦公軟體。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成 Electron 桌面應用程式碼，功能需包括：\n1. 前端介面設計\n2. 功能分區與交互流程\n3. 基本後台整合\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 23,
      "title": "整合第三方支付系統",
      "description": "打造整合 Stripe、PayPal 等支付系統的方案，就像提供多種付款方式方便用戶交易。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成第三方支付整合方案程式碼，功能需包含：\n1. 支付 API 整合\n2. 交易處理與安全認證\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 24,
      "title": "第三方登入 (OAuth) 集成",
      "description": "實現 Google、Facebook 等第三方登入功能，就像提供多重身份認證，方便用戶註冊與登入。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成第三方登入系統程式碼，功能需包含：\n1. OAuth 認證整合\n2. 用戶資料同步\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 25,
      "title": "電子郵件通知與行銷系統",
      "description": "建立自動發送電子郵件通知與行銷訊息的系統，就像自動推送優惠券給顧客。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成電子郵件通知系統程式碼，要求：\n1. 郵件內容自動生成\n2. 定時發送與通知\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 26,
      "title": "內容管理系統 (CMS) 構建",
      "description": "建立一個易於更新與管理的 CMS 系統，就像一本易於編輯的線上雜誌。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成 CMS 系統程式碼，功能需包含：\n1. 文章編輯與發布\n2. 內容分類與搜尋\n3. 用戶權限管理\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 27,
      "title": "在線音樂播放平台",
      "description": "建立一個線上音樂播放平台，支援歌曲播放、歌單管理與用戶互動，就像一場線上音樂會。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成在線音樂播放平台程式碼，功能要求：\n1. 音樂播放器與串流\n2. 歌單管理\n3. 用戶互動與評論\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 28,
      "title": "在線視頻直播平台",
      "description": "打造一個視頻直播平台，支援即時直播、互動問答與評論，就像線上直播節目。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成視頻直播平台程式碼，功能需包含：\n1. 直播流整合\n2. 即時聊天與互動\n3. 評論與回饋\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 29,
      "title": "用戶行為數據分析系統",
      "description": "建立一個用戶行為數據分析平台，協助決策，就像根據銷售數據調整菜單。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成用戶行為數據分析平台程式碼，要求：\n1. 數據收集與存儲\n2. 數據分析與預測\n3. 圖表與報表展示\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 30,
      "title": "企業內部協作平台",
      "description": "打造企業內部協作平台，支援文件共享、任務分派與即時溝通，就像一個數位會議室。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成企業內部協作平台程式碼，功能包括：\n1. 文件共享與管理\n2. 任務分派與追蹤\n3. 即時聊天與通知\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 31,
      "title": "自訂化儀表板與報表系統",
      "description": "建立一個自訂化儀表板系統，讓用戶能根據需求生成個性化報表，就像打造專屬的數據展示中心。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成自訂化儀表板系統程式碼，功能需包含：\n1. 用戶自訂圖表與佈局\n2. 報表生成與下載\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 32,
      "title": "聊天機器人與智能客服系統",
      "description": "建立聊天機器人與智能客服系統，提供自動回覆與即時互動，就像全天候智慧客服中心。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成聊天機器人與智能客服系統程式碼，功能需包含：\n1. 自動回覆與聊天流程\n2. 客服管理後台\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 33,
      "title": "在線測驗與評量平台",
      "description": "建立在線測驗平台，支援題庫管理、自動評分與結果分析，就像一個數位考試中心。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成在線測驗平台程式碼，功能要求：\n1. 題庫管理與試卷生成\n2. 自動評分與結果分析\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 34,
      "title": "健身追蹤與社群平台",
      "description": "建立健身追蹤平台，記錄運動數據並促進社群互動，就像一個數位化的健身俱樂部。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成健身追蹤平台程式碼，功能需包含：\n1. 運動數據記錄\n2. 數據分析與報告\n3. 社群互動\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 35,
      "title": "智慧家居控制系統",
      "description": "建立智慧家居控制系統，讓用戶能遠端操控家中設備，就像智能家庭中樞般便捷。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成智慧家居控制系統程式碼，功能需包含：\n1. IoT 設備整合\n2. 遠端控制\n3. 安全防護\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 36,
      "title": "在線餐廳預訂系統",
      "description": "建立在線餐廳預訂系統，支援訂位與點餐，就像數位化的訂位平台。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成餐廳預訂系統程式碼，功能要求：\n1. 訂位流程與座位選擇\n2. 點餐功能\n3. 用戶評價與通知\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 37,
      "title": "移動支付與錢包應用",
      "description": "打造移動支付錢包應用，支援支付、轉帳與交易記錄，就像現代化的電子錢包。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成移動支付錢包應用程式碼，功能需包含：\n1. 支付 API 整合\n2. 用戶認證與安全\n3. 交易記錄\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 38,
      "title": "地圖與定位服務應用",
      "description": "打造基於地圖與定位的應用，提供位置搜尋與導航服務，就像數位化的導航儀。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成地圖與定位服務程式碼，功能需包含：\n1. 整合地圖 API（如 Google Maps）\n2. 位置搜尋與導航\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 39,
      "title": "遊戲排行榜與社群功能",
      "description": "建立遊戲排行榜系統，支援用戶排名與成就展示，就像線上競技平台。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成遊戲排行榜系統程式碼，功能要求：\n1. 用戶數據收集\n2. 排行榜生成\n3. 成就展示\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 40,
      "title": "在線文件儲存與分享平台",
      "description": "建立雲端文件儲存與分享系統，方便用戶管理檔案，就像數位化的雲端櫃檯。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成文件儲存與分享平台程式碼，功能需包含：\n1. 文件上傳與管理\n2. 權限設定\n3. 分享連結生成\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 41,
      "title": "個人作品集網站",
      "description": "建立個人作品集網站，展示個人作品與技能，就像數位化的個人品牌名片，吸引潛在機會。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成個人作品集網站程式碼，功能需包含：\n1. 作品展示\n2. 技能介紹\n3. 聯絡資訊\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 42,
      "title": "整合 IoT 與數據監控平台",
      "description": "建立 IoT 數據監控平台，支援即時數據分析與報警通知，就像智慧工廠的監控中心。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成 IoT 數據監控平台程式碼，功能需包含：\n1. IoT 設備整合\n2. 數據收集與監控\n3. 報警與可視化展示\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 43,
      "title": "零代碼網頁製作工具設計",
      "description": "設計一套零代碼網頁製作工具，讓使用者能像搭積木般輕鬆建立網站，完全不需撰寫代碼。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成零代碼網頁製作平台設計方案，要求：\n1. 拖拉式介面\n2. 模組化組件\n3. 佈局與互動功能\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 44,
      "title": "在線博客零代碼平台",
      "description": "建立一個完全零代碼的博客平台，讓用戶透過可視化操作輕鬆建立與管理博客。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成在線博客平台設計方案，功能需包含：\n1. 拖拉式文章編輯\n2. 內容管理與發布\n3. 主題選擇\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 45,
      "title": "可視化工作流程自動化平台",
      "description": "建立一個工作流程自動化平台，讓使用者能透過可視化介面設計流程，就像畫流程圖般簡單。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成工作流程自動化平台設計方案，要求：\n1. 流程設計介面\n2. 模組連結與自動化規則\n3. 提醒通知\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 46,
      "title": "雲端資料庫管理與監控",
      "description": "建立一個雲端資料庫管理平台，讓使用者透過圖形介面管理與監控資料庫，就像數位化的資料庫儀表板。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成雲端資料庫管理平台設計方案，功能需包含：\n1. 資料庫監控與備份\n2. 資料管理與維護\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 47,
      "title": "零代碼移動應用生成器",
      "description": "建立一個零代碼移動應用生成平台，讓使用者透過可視化介面快速生成行動 App。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成零代碼移動應用生成器設計方案，要求：\n1. 應用模板選擇\n2. 介面編輯與組件配置\n3. 部署流程\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 48,
      "title": "全自動內容生成平台",
      "description": "建立一個全自動內容生成平台，利用 AI 模型生成文章與產品描述，讓用戶完全無需撰寫文案。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成全自動內容生成平台設計方案，功能需包含：\n1. AI 內容生成整合\n2. 自動排版與發布\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 49,
      "title": "智能數據分析與預測平台",
      "description": "建立智能數據分析平台，根據用戶數據進行預測與決策支持，就像智慧商業分析工具。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成智能數據分析與預測平台設計方案，要求：\n1. 數據收集與存儲\n2. 分析與預測模型\n3. 可視化展示\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    },
    {
      "number": 50,
      "title": "零代碼電商平台設計",
      "description": "打造完整的零代碼電商平台方案，涵蓋商品上架、訂單處理與物流管理，就像一站式購物中心。",
      "prompt": "【零代碼提示 🚀】請依據下列條例描述生成零代碼電商平台設計方案，功能需包含：\n1. 前端頁面設計與商品展示\n2. 訂單管理與支付整合\n3. 物流與配送管理\n請在此貼上您的需求條例：［請在此處貼上條例描述］"
    }
  ],
  "functionality": [
    {
      "number": 1,
      "title": "使用 Redux Toolkit 進行狀態管理",
      "description": "利用 Redux Toolkit 快速構建全局狀態管理系統，就像用自動攪拌器輕鬆混合所有食材。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 Redux Toolkit 管理 React 應用中的狀態，並提供一個簡單的範例程式碼（包含 createSlice、configureStore 與 dispatch 的使用）。最後，請出考題：\"Redux Toolkit 如何簡化狀態管理流程？\"。"
    },
    {
      "number": 2,
      "title": "使用 Zustand 進行簡易狀態管理",
      "description": "Zustand 提供輕量級狀態管理，就像用迷你攪拌器快速混合食材，簡單又高效。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 Zustand 管理 React 應用中的狀態，並附上一個簡單的範例程式碼。最後，請出考題：\"Zustand 與 Redux 有何主要不同？\"。"
    },
    {
      "number": 3,
      "title": "利用 Recoil 管理複雜狀態",
      "description": "Recoil 能夠簡化複雜狀態管理，就像精準分配各種食材到不同盤子中，讓每道菜都恰到好處。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 Recoil 進行狀態管理，並提供一個包含 atom 與 selector 的範例程式碼。最後，請出考題：\"Recoil 如何處理非同步狀態？\"。"
    },
    {
      "number": 4,
      "title": "使用 MobX 進行狀態管理",
      "description": "MobX 提供響應式狀態管理，就像自動調整溫度的烤箱，讓資料流動更加自然。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何在 React 中使用 MobX 進行狀態管理，並附上一個簡單的範例程式碼。最後，請出考題：\"MobX 的響應式原理是什麼？\"。"
    },
    {
      "number": 5,
      "title": "使用 React Query 進行資料同步與快取",
      "description": "React Query 幫助你自動管理資料請求與快取，就像後台自動補充食材庫存，讓數據時刻新鮮。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 React Query 進行 API 資料請求、快取與同步，並附上範例程式碼。最後，請出考題：\"React Query 如何改善資料同步問題？\"。"
    },
    {
      "number": 6,
      "title": "使用 SWR 快速資料請求",
      "description": "SWR 提供快速且自動更新的資料請求功能，就像專門設計的物流系統，快速傳遞資訊。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹 SWR 的基本概念及用法，並提供一個簡單的範例程式碼。最後，請出考題：\"SWR 如何實現資料自動更新？\"。"
    },
    {
      "number": 7,
      "title": "基於 React Context 的全局佈局管理",
      "description": "利用 React Context 管理全局佈局，就像統一設計整個餐廳的風格，保持介面一致。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 React Context 實現全局佈局管理，並附上範例程式碼。最後，請出考題：\"Context API 的最佳應用場景是什麼？\"。"
    },
    {
      "number": 8,
      "title": "使用 React Router v6 實作動態路由",
      "description": "React Router v6 能讓你動態管理路由，就像設計一個隨需求變動的迷宮。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹 React Router v6 的新特性與動態路由實作方法，並提供一個實際範例程式碼。最後，請出考題：\"如何利用動態路由處理參數？\"。"
    },
    {
      "number": 9,
      "title": "實作基於 React Router 的嵌套路由",
      "description": "嵌套路由讓頁面結構層次分明，就像多層次的建築設計，方便用戶瀏覽。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何在 React Router 中實作嵌套路由，並附上具體範例程式碼。最後，請出考題：\"嵌套路由如何提升用戶體驗？\"。"
    },
    {
      "number": 10,
      "title": "使用 Next.js 進行伺服器端渲染 (SSR)",
      "description": "Next.js 提供 SSR 功能，能提升 SEO 與初次載入速度，就像提前預熱烤箱加速出餐。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 Next.js 實現伺服器端渲染（SSR），並提供一個簡單範例程式碼。最後，請出考題：\"SSR 如何改善 SEO？\"。"
    },
    {
      "number": 11,
      "title": "使用 Gatsby 建立靜態網站",
      "description": "Gatsby 可快速生成靜態網站，就像預先製作好的冷盤，讓網站載入更迅速。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 Gatsby 建立靜態網站，並附上一個範例程式碼。最後，請出考題：\"Gatsby 靜態生成與動態渲染有何不同？\"。"
    },
    {
      "number": 12,
      "title": "React Hooks 深入應用：自訂 usePrevious Hook",
      "description": "自訂 usePrevious Hook 可記住前一個狀態，就像拍攝慢動作回放，幫你分析狀態變化。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何自訂一個 usePrevious Hook，並附上實際範例程式碼。最後，請出考題：\"usePrevious 如何幫助追蹤狀態變化？\"。"
    },
    {
      "number": 13,
      "title": "實作自訂 useDebounce Hook 進行防抖處理",
      "description": "防抖處理就像等待食材落穩再下鍋，避免重複觸發，提升效能。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何實作一個 useDebounce Hook，用以防止函數頻繁調用，並附上範例程式碼。最後，請出考題：\"防抖在使用者輸入中有何應用？\"。"
    },
    {
      "number": 14,
      "title": "使用 useThrottle Hook 限制函數調用",
      "description": "函數節流就像控制烹調速度，確保操作不會超載，就像調節火候一樣。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 useThrottle Hook 限制函數的調用頻率，並附上範例程式碼。最後，請出考題：\"節流和防抖有何區別？\"。"
    },
    {
      "number": 15,
      "title": "利用 React.memo 進行元件記憶化",
      "description": "React.memo 能記住元件輸出，避免重複渲染，就像儲存常用菜譜，節省資源。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 React.memo 優化元件渲染，並附上範例程式碼。最後，請出考題：\"React.memo 的原理是什麼？\"。"
    },
    {
      "number": 16,
      "title": "使用 useMemo 優化計算型元件",
      "description": "useMemo 可快取運算結果，就像預先準備好半成品，節省重複計算時間。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 useMemo 快取運算結果，並附上具體範例程式碼。最後，請出考題：\"如何判斷哪些運算需要快取？\"。"
    },
    {
      "number": 17,
      "title": "利用 useCallback 優化函數記憶化",
      "description": "useCallback 能記住函數實例，避免重複建立，就像保存秘製調料的配方。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 useCallback 優化函數傳遞，並附上一個範例程式碼。最後，請出考題：\"在何種情況下應使用 useCallback？\"。"
    },
    {
      "number": 18,
      "title": "實作 Lazy Loading 與 Code Splitting",
      "description": "利用 Lazy Loading 分割程式碼，讓初始載入更快，就像按需供應菜餚，避免等待。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 React.lazy 與 Suspense 實作 Lazy Loading 與 Code Splitting，並附上完整範例程式碼。最後，請出考題：\"懶加載對初次載入速度有何影響？\"。"
    },
    {
      "number": 19,
      "title": "利用 React.lazy 與 Suspense 加速初始載入",
      "description": "React.lazy 與 Suspense 能動態載入元件，就像根據訂單現做菜餚，提升載入速度。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 React.lazy 與 Suspense 實現元件動態載入，並附上完整範例程式碼。最後，請出考題：\"如何設計一個吸引人的載入動畫介面？\"。"
    },
    {
      "number": 20,
      "title": "使用 Error Boundary 捕捉錯誤並顯示備用 UI",
      "description": "Error Boundary 如同在系統中設置安全網，捕捉子元件錯誤，保護整體應用穩定。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何在 React 中實作 Error Boundary，並附上示例程式碼。最後，請出考題：\"Error Boundary 適用於哪些場合？\"。"
    },
    {
      "number": 21,
      "title": "整合 styled-components 實現動態樣式",
      "description": "styled-components 讓你以 JavaScript 管理 CSS，就像調製專屬醬汁，實現動態樣式。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 styled-components 在 React 中創建動態樣式，並附上範例程式碼。最後，請出考題：\"styled-components 如何促進元件重用？\"。"
    },
    {
      "number": 22,
      "title": "使用 Emotion 實現 CSS in JS",
      "description": "Emotion 是另一種 CSS in JS 解決方案，就像提供多種調味品，讓介面風格更加豐富。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 Emotion 在 React 中撰寫 CSS，並附上實際範例程式碼。最後，請出考題：\"Emotion 與 styled-components 的主要差異是什麼？\"。"
    },
    {
      "number": 23,
      "title": "使用 Tailwind CSS 快速構建響應式介面",
      "description": "Tailwind CSS 提供實用工具類別，就像一組萬用烹飪工具，快速搭建美觀介面。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何在 React 專案中整合 Tailwind CSS，並附上一個響應式介面範例程式碼。最後，請出考題：\"如何自訂 Tailwind 配置以滿足品牌需求？\"。"
    },
    {
      "number": 24,
      "title": "整合 Ant Design 建立專業 UI",
      "description": "Ant Design 提供企業級 UI 元件庫，就像高級餐廳的精美擺盤，讓介面更專業。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何在 React 專案中整合 Ant Design，並附上使用元件的範例程式碼。最後，請出考題：\"如何自訂 Ant Design 主題？\"。"
    },
    {
      "number": 25,
      "title": "利用 Material-UI 自訂主題",
      "description": "Material-UI 提供高度可定制的元件庫，就像精心設計的品牌視覺，讓整體風格統一。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Material-UI 設定並自訂主題，並附上範例程式碼。最後，請出考題：\"Material-UI 主題如何幫助統一應用風格？\"。"
    },
    {
      "number": 26,
      "title": "使用 BootstrapCDN 加速 CSS 載入",
      "description": "透過 BootstrapCDN 可快速載入 Bootstrap 樣式，就像快速取得必需的烹飪工具，提升效能。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請說明如何在 React 專案中利用 BootstrapCDN 載入 Bootstrap 樣式，並附上範例程式碼。最後，請出考題：\"使用 CDN 的好處有哪些？\"。"
    },
    {
      "number": 27,
      "title": "整合 FontAwesome 提供精美圖標",
      "description": "FontAwesome 提供大量精美圖標，就像餐廳精選的裝飾元素，提升介面視覺效果。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何在 React 專案中整合 FontAwesome，並附上使用圖標的範例程式碼。最後，請出考題：\"FontAwesome 在 UI 設計中扮演什麼角色？\"。"
    },
    {
      "number": 28,
      "title": "使用 Google Fonts 增強文字設計",
      "description": "Google Fonts 讓你輕鬆選擇各式字型，就像選擇精美餐具，為介面增添質感。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何在 React 專案中整合 Google Fonts，並附上使用字型的範例程式碼。最後，請出考題：\"如何選擇適合品牌的字型？\"。"
    },
    {
      "number": 29,
      "title": "利用 Framer Motion 為元件添加動畫效果",
      "description": "Framer Motion 能為元件添加流暢動畫，就像精心調製的視覺盛宴，吸引用戶目光。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Framer Motion 為 React 元件添加動畫效果，並附上具體範例程式碼。最後，請出考題：\"如何根據用戶互動調整動畫參數？\"。"
    },
    {
      "number": 30,
      "title": "使用 React Spring 實作流暢動畫",
      "description": "React Spring 提供物理驅動的動畫效果，就像自然流暢的水流，為介面增添活力。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 React Spring 實現動畫效果，並附上範例程式碼。最後，請出考題：\"React Spring 如何模擬真實物理運動？\"。"
    },
    {
      "number": 31,
      "title": "實作自訂 Formik 表單處理與驗證",
      "description": "Formik 幫助簡化表單狀態管理與驗證，就像標準化食譜，讓表單操作更流暢。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Formik 處理表單狀態與驗證，結合 Yup 進行驗證，並附上具體範例程式碼。最後，請出考題：\"Formik 如何簡化表單處理流程？\"。"
    },
    {
      "number": 32,
      "title": "整合 Yup 進行表單驗證",
      "description": "Yup 提供簡潔的物件驗證功能，就像仔細檢查每道菜的調味比例，確保資料正確。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何整合 Yup 與 Formik 實現表單驗證，並附上具體範例程式碼。最後，請出考題：\"Yup 如何描述複雜的驗證規則？\"。"
    },
    {
      "number": 33,
      "title": "使用 React Hook Form 快速建立表單",
      "description": "React Hook Form 提供高效輕量的表單管理，就像自動化工具幫你完成重複性工作。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 React Hook Form 建立與管理表單，並附上範例程式碼。最後，請出考題：\"React Hook Form 與其他表單庫相比有何優勢？\"。"
    },
    {
      "number": 34,
      "title": "使用 Axios 進行 REST API 請求",
      "description": "Axios 是輕量級 HTTP 請求庫，就像快速配送新鮮食材，確保資料即時送達。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Axios 發送 REST API 請求，並附上一個具體範例程式碼。最後，請出考題：\"Axios 如何處理請求錯誤？\"。"
    },
    {
      "number": 35,
      "title": "使用 Fetch API 實作資料請求",
      "description": "Fetch API 是瀏覽器原生的資料請求方法，就像直接向市場採購食材，操作簡單直觀。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Fetch API 發送 HTTP 請求，並附上一個簡單範例程式碼。最後，請出考題：\"如何使用 Fetch 處理錯誤回應？\"。"
    },
    {
      "number": 36,
      "title": "整合 GraphQL 與 Apollo Client",
      "description": "GraphQL 讓前端按需請求資料，就像提供豐富的菜單選項，Apollo Client 負責資料管理與快取。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Apollo Client 連接 GraphQL API，並附上查詢與變更的完整範例程式碼。最後，請出考題：\"GraphQL 與 RESTful API 的主要差異是什麼？\"。"
    },
    {
      "number": 37,
      "title": "使用 Apollo Client 進行資料快取",
      "description": "Apollo Client 能自動快取資料，就像建立食材冷藏庫，確保數據隨時新鮮。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何利用 Apollo Client 實現資料快取與同步，並附上具體範例程式碼。最後，請出考題：\"快取策略如何影響資料一致性？\"。"
    },
    {
      "number": 38,
      "title": "實作基於 WebSocket 的即時更新",
      "description": "WebSocket 提供持久連線，讓資料能即時更新，就像即時通報廚房訂單狀態。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何在 React 中使用 WebSocket 實現即時更新功能，並附上一個簡單範例程式碼。最後，請出考題：\"WebSocket 如何保持連線穩定？\"。"
    },
    {
      "number": 39,
      "title": "利用 Socket.io 建立即時通訊功能",
      "description": "Socket.io 能建立雙向通訊，就像餐廳中前後台即時聯絡，確保訊息迅速傳遞。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Socket.io 在 React/Node.js 應用中實現即時通訊功能，並附上範例程式碼。最後，請出考題：\"如何管理多用戶訊息廣播？\"。"
    },
    {
      "number": 40,
      "title": "使用 Firebase Firestore 進行資料存取",
      "description": "Firebase Firestore 是即時資料庫，就像隨時更新的食材庫存，方便資料讀取與更新。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何在 React 應用中整合 Firebase Firestore 進行資料存取，並附上一個範例程式碼。最後，請出考題：\"Firestore 的資料同步機制如何運作？\"。"
    },
    {
      "number": 41,
      "title": "整合 Firebase Authentication 進行身份驗證",
      "description": "Firebase Authentication 提供簡單易用的身份驗證，就像快速辦理會員卡，保證用戶安全登入。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Firebase Authentication 實現用戶身份驗證，並附上範例程式碼。最後，請出考題：\"Firebase Authentication 如何處理第三方登入？\"。"
    },
    {
      "number": 42,
      "title": "使用 AWS Amplify 建立全端應用",
      "description": "AWS Amplify 提供一站式全端開發工具，讓應用開發就像搭配全套廚具般方便快捷。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 AWS Amplify 快速建立全端應用，並附上實際範例程式碼。最後，請出考題：\"AWS Amplify 如何簡化部署流程？\"。"
    },
    {
      "number": 43,
      "title": "利用 Serverless 架構優化後端運行",
      "description": "Serverless 架構使後端運行更高效，就像自動化廚房系統，無需管理伺服器。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 Serverless 架構（例如 AWS Lambda）來部署後端服務，並附上範例程式碼。最後，請出考題：\"Serverless 架構的優勢與挑戰是什麼？\"。"
    },
    {
      "number": 44,
      "title": "整合 Docker 與 Kubernetes 部署 React 應用",
      "description": "利用 Docker 與 Kubernetes 實現容器化部署，就像標準化廚房設備，讓系統穩定且易於擴展。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 Docker 打包 React 應用，並利用 Kubernetes 進行部署與自動擴展，附上相關配置範例。最後，請出考題：\"如何使用 Kubernetes 管理容器化應用？\"。"
    },
    {
      "number": 45,
      "title": "使用 Jest 撰寫 React 單元測試",
      "description": "Jest 是 React 單元測試的首選，就像質檢員確保每道菜都合格。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Jest 撰寫 React 元件的單元測試，並附上範例程式碼。最後，請出考題：\"如何使用 Jest 進行快照測試？\"。"
    },
    {
      "number": 46,
      "title": "整合 React Testing Library 測試元件",
      "description": "React Testing Library 幫助你以用戶視角測試元件，就像模擬真實用餐體驗檢查每個細節。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 React Testing Library 測試 React 元件，並附上具體範例程式碼。最後，請出考題：\"如何驗證用戶互動事件？\"。"
    },
    {
      "number": 47,
      "title": "使用 Cypress 進行 E2E 測試",
      "description": "Cypress 提供端對端測試方案，就像模擬完整用餐流程，確保系統從頭到尾無誤。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請展示如何使用 Cypress 為 React 應用撰寫端對端測試，並附上範例程式碼。最後，請出考題：\"Cypress 如何模擬用戶操作？\"。"
    },
    {
      "number": 48,
      "title": "實作基於 Atomic Design 的元件架構",
      "description": "Atomic Design 將 UI 拆解成最小單元，就像將食材拆分成基礎配料，提升元件重用性。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹 Atomic Design 的概念，並示範如何在 React 專案中應用此設計模式構建元件架構，附上範例程式碼。最後，請出考題：\"Atomic Design 如何改善 UI 維護？\"。"
    },
    {
      "number": 49,
      "title": "應用 BEM 命名規範提升 CSS 維護性",
      "description": "BEM 命名規範讓 CSS 結構清晰，就像為食譜標明步驟，方便團隊協作與維護。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹 BEM 命名規範在 CSS 編寫中的應用，並附上一個示例程式碼。最後，請出考題：\"BEM 命名規範如何提高程式碼可讀性？\"。"
    },
    {
      "number": 50,
      "title": "使用 Webpack Bundle Analyzer 分析專案效能",
      "description": "Webpack Bundle Analyzer 能視覺化專案打包結果，就像用 X 光檢查菜單內部結構，找出效能瓶頸。",
      "prompt": "【請以生動活潑的劇場/比喻風格回應】請介紹如何使用 Webpack Bundle Analyzer 分析 React 專案的打包效能，並附上相關操作範例。最後，請出考題：\"如何根據分析結果優化打包配置？\"。"
    }
  ]
}