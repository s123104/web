{
  "learning": {
    "overview": "為初學者與中級開發者提供從前端基礎到進階技術的完整學習路徑，幫助建立紮實技能。",
    "recommendedFor": {
      "beginner": [1, 2, 3, 4, 5],
      "intermediate": [11, 12, 13, 14, 15],
      "advanced": [41, 42, 43, 44, 45]
    },
    "items": [
      {
        "number": 1,
        "title": "HTML 語意化標籤基礎",
        "level": "beginner",
        "category": "HTML",
        "slug": "html-semantic-tags-basics",
        "keywords": ["HTML", "語意化標籤", "SEO", "網頁結構"],
        "description": "HTML 語意化標籤就像台北夜市攤位的招牌，讓網頁結構一目了然，還能提升 SEO。",
        "prompt": "【請以劇場/比喻風格回應】以『一個三段式個人部落格首頁（標題、導航、文章）』為例，逐步介紹 HTML 常用語意化標籤（如 <header>、<nav>、<article>）的用途與情境。步驟 1：設置基本結構；步驟 2：加入標籤並解釋用途；步驟 3：展示結果。提供具體程式碼範例。考題：'何時用 <section> 與 <article>？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "<header><h1>我的部落格</h1></header>\n<nav><a href='#'>首頁</a></nav>\n<article><h2>文章標題</h2><p>內容</p></article>",
        "suggestedTimeline": "建議第 1 週學習，約 2 小時",
        "applicationScenarios": ["個人部落格", "簡單靜態頁", "SEO 優化頁面"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 2,
        "title": "CSS 基礎樣式設計",
        "level": "beginner",
        "category": "CSS",
        "slug": "css-basics-styling",
        "keywords": ["CSS", "樣式", "基礎", "佈局"],
        "description": "CSS 如夜市攤販的裝飾師，為網頁增添色彩與美感。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單個人介紹卡片（含姓名與照片）』為例，逐步介紹 CSS 基本屬性（如 color、font-size、margin）。步驟 1：設置 HTML 結構；步驟 2：應用樣式；步驟 3：調整佈局。提供具體程式碼範例。考題：'如何用 CSS 居中元素？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "<div class='card'><h2>John</h2><img src='photo.jpg' alt='photo'></div>\n<style>.card { color: #333; font-size: 20px; margin: 10px; text-align: center; }</style>",
        "suggestedTimeline": "建議第 1 週學習，約 3 小時",
        "applicationScenarios": ["個人卡片", "簡單佈局", "樣式入門"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 3,
        "title": "JavaScript 變數與資料型態入門",
        "level": "beginner",
        "category": "JavaScript",
        "slug": "js-variables-data-types-intro",
        "keywords": ["JavaScript", "變數", "資料型態", "基礎"],
        "description": "JS 變數與資料型態如夜市小吃的原料，是程式邏輯的基石。",
        "prompt": "【請以劇場/比喻風格回應】以『一個用戶資料表單（姓名、年齡）』為例，逐步介紹 JS 變數（let、const）與資料型態（String、Number）。步驟 1：聲明變數；步驟 2：賦值與操作；步驟 3：展示結果。提供具體程式碼範例。考題：'let 與 const 差異？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "let name = 'John'; const age = 25; console.log(`${name} is ${age} years old`);",
        "suggestedTimeline": "建議第 2 週學習，約 2 小時",
        "applicationScenarios": ["表單數據", "簡單計算", "用戶輸入"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 4,
        "title": "CSS Flexbox 佈局入門",
        "level": "beginner",
        "category": "CSS",
        "slug": "css-flexbox-layout-intro",
        "keywords": ["CSS", "Flexbox", "響應式", "佈局"],
        "description": "Flexbox 像台灣廟會的舞龍隊，元素隨意排列，佈局如流水般順暢。",
        "prompt": "【請以劇場/比喻風格回應】以『一個響應式導航欄（桌機橫排、手機直排）』為例，逐步介紹 CSS Flexbox 基本屬性（如 flex-direction、justify-content）。步驟 1：設置容器；步驟 2：應用 Flexbox 屬性；步驟 3：測試響應效果。提供具體程式碼範例。考題：'如何用 Flexbox 調整間距？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": ".nav { display: flex; flex-direction: row; justify-content: space-between; } @media (max-width: 600px) { .nav { flex-direction: column; } }",
        "suggestedTimeline": "建議第 2 週學習，約 3 小時",
        "applicationScenarios": ["導航欄", "卡片列表", "簡單響應佈局"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 5,
        "title": "JavaScript 控制流程基礎",
        "level": "beginner",
        "category": "JavaScript",
        "slug": "js-control-flow-basics",
        "keywords": ["JavaScript", "控制流程", "if/else", "基礎"],
        "description": "控制流程如炒菜的步驟，讓程式邏輯有條不紊。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單年齡檢查（是否成人）』為例，逐步介紹 if/else 用法。步驟 1：設置條件；步驟 2：撰寫邏輯；步驟 3：測試結果。提供具體程式碼範例。考題：'如何處理多條件？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "const age = 20; if (age >= 18) { console.log('成人'); } else { console.log('未成年'); }",
        "suggestedTimeline": "建議第 2 週學習，約 2 小時",
        "applicationScenarios": ["年齡驗證", "條件顯示", "簡單決策"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 6,
        "title": "JavaScript 迴圈入門",
        "level": "beginner",
        "category": "JavaScript",
        "slug": "js-loops-intro",
        "keywords": ["JavaScript", "迴圈", "for", "while"],
        "description": "迴圈如夜市攞販的重複叫賣，自動處理多次任務。",
        "prompt": "【請以劇場/比喻風格回應】以『一個數字列表（打印 1-5）』為例，逐步介紹 for 與 while 迴圈用法。步驟 1：設置初始條件；步驟 2：撰寫迴圈；步驟 3：測試結果。提供具體程式碼範例。考題：'for 與 while 何時使用？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "for (let i = 1; i <= 5; i++) { console.log(i); }",
        "suggestedTimeline": "建議第 3 週學習，約 2 小時",
        "applicationScenarios": ["列表生成", "數據遍歷", "重複操作"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 7,
        "title": "JavaScript 函式基礎",
        "level": "beginner",
        "category": "JavaScript",
        "slug": "js-functions-basics",
        "keywords": ["JavaScript", "函式", "基礎", "模組化"],
        "description": "函式如夜市攞販的獨門配方，重複使用邏輯。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單加法計算器』為例，逐步介紹函式定義與調用。步驟 1：定義函式；步驟 2：傳入參數；步驟 3：調用並展示結果。提供具體程式碼範例。考題：'函式的參數如何設計？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "function add(a, b) { return a + b; } console.log(add(2, 3));",
        "suggestedTimeline": "建議第 3 週學習，約 2 小時",
        "applicationScenarios": ["簡單計算", "邏輯封裝", "模組化設計"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 8,
        "title": "CSS Grid 網格基礎",
        "level": "beginner",
        "category": "CSS",
        "slug": "css-grid-basics",
        "keywords": ["CSS", "Grid", "網格佈局", "分區"],
        "description": "CSS Grid 像規劃台北 101 的樓層，讓複雜佈局輕鬆分區。",
        "prompt": "【請以劇場/比喻風格回應】以『一個三欄新聞頁（頭條、側邊欄、廣告）』為例，逐步解釋 CSS Grid 原理與屬性（如 grid-template-columns）。步驟 1：定義網格容器；步驟 2：設置欄位；步驟 3：調整間距。提供具體程式碼範例。考題：'Grid 與 Flexbox 差異？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": ".grid { display: grid; grid-template-columns: 2fr 1fr 1fr; gap: 10px; }",
        "suggestedTimeline": "建議第 3 週學習，約 3 小時",
        "applicationScenarios": ["新聞頁面", "儀表板", "複雜佈局"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 9,
        "title": "JavaScript DOM 操作基礎",
        "level": "beginner",
        "category": "JavaScript",
        "slug": "js-dom-manipulation-basics",
        "keywords": ["JavaScript", "DOM", "操作", "動態"],
        "description": "DOM 操作如夜市攞販即時調整菜單，讓網頁動態變化。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單按鈕（點擊變色）』為例，逐步介紹 DOM 操作（getElementById、style）。步驟 1：選取元素；步驟 2：設置事件；步驟 3：改變樣式。提供具體程式碼範例。考題：'如何選取多個元素？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "const btn = document.getElementById('btn'); btn.addEventListener('click', () => btn.style.backgroundColor = 'red');",
        "suggestedTimeline": "建議第 4 週學習，約 3 小時",
        "applicationScenarios": ["按鈕交互", "動態內容", "簡單動畫"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 10,
        "title": "JavaScript 事件處理入門",
        "level": "beginner",
        "category": "JavaScript",
        "slug": "js-event-handling-intro",
        "keywords": ["JavaScript", "事件", "addEventListener", "互動"],
        "description": "事件處理如夜市攞販的即時應對，增加網頁互動性。",
        "prompt": "【請以劇場/比喻風格回應】以『一個點擊計數器』為例，逐步介紹 addEventListener 用法。步驟 1：選取元素；步驟 2：添加事件監聽；步驟 3：更新計數。提供具體程式碼範例。考題：'什麼是事件冒泡？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "let count = 0; document.getElementById('btn').addEventListener('click', () => console.log(++count));",
        "suggestedTimeline": "建議第 4 週學習，約 2 小時",
        "applicationScenarios": ["點擊計數", "表單提交", "交互按鈕"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 11,
        "title": "JavaScript 非同步入門",
        "level": "intermediate",
        "category": "JavaScript",
        "slug": "js-async-intro",
        "keywords": ["JavaScript", "非同步", "Promise", "基礎"],
        "description": "非同步如夜市攞販的排隊叫號，協調任務順序。",
        "prompt": "【請以劇場/比喻風格回應】以『從 API 獲取用戶姓名』為例，逐步介紹 Promise 用法。步驟 1：設置請求；步驟 2：處理 Promise；步驟 3：展示結果。提供具體程式碼範例。考題：'Promise 如何處理錯誤？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "fetch('https://api.example.com/user').then(res => res.json()).then(data => console.log(data.name));",
        "suggestedTimeline": "建議第 5 週學習，約 3 小時",
        "applicationScenarios": ["API 請求", "數據載入", "異步操作"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 12,
        "title": "Git 版本控制入門",
        "level": "beginner",
        "category": "Tools",
        "slug": "git-version-control-intro",
        "keywords": ["Git", "版本控制", "commit", "基礎"],
        "description": "Git 如夜市攞販的進貨日誌，記錄版本變更。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單文字檔案』為例，逐步介紹 Git 基礎操作（init、add、commit）。步驟 1：初始化倉庫；步驟 2：添加檔案；步驟 3：提交變更。提供具體命令範例。考題：'如何查看提交歷史？' 若有疑問請貼上［命令］，我將協助解答。",
        "exampleCode": "git init\ngit add README.md\ngit commit -m '初次提交'",
        "suggestedTimeline": "建議第 5 週學習，約 2 小時",
        "applicationScenarios": ["個人專案版本控制", "檔案追蹤", "簡單協作"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 13,
        "title": "React 基礎與環境搭建",
        "level": "beginner",
        "category": "React",
        "slug": "react-basics-environment",
        "keywords": ["React", "環境搭建", "組件", "基礎"],
        "description": "React 如夜市攞販的模組化攤位，快速構建介面。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單問候組件』為例，逐步介紹 React 環境搭建與基礎概念。步驟 1：使用 Create React App 設置項目；步驟 2：創建組件；步驟 3：運行應用。提供具體程式碼範例。考題：'React 組件的結構是什麼？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "npx create-react-app my-app\ncd my-app\nnpm start\n// App.js\nimport React from 'react';\nconst App = () => <h1>Hello, World!</h1>;\nexport default App;",
        "suggestedTimeline": "建議第 6 週學習，約 4 小時",
        "applicationScenarios": ["簡單組件", "初學項目", "靜態頁面"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 14,
        "title": "React Props 與 State 入門",
        "level": "beginner",
        "category": "React",
        "slug": "react-props-state-intro",
        "keywords": ["React", "Props", "State", "基礎"],
        "description": "Props 與 State 如夜市攞販的食材與調味，驅動組件動態。",
        "prompt": "【請以劇場/比喻風格回應】以『一個用戶卡片（顯示姓名與計數）』為例，逐步介紹 Props 與 State。步驟 1：創建組件與 Props；步驟 2：添加 State；步驟 3：實現交互。提供具體程式碼範例。考題：'Props 與 State 何時使用？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "import React, { useState } from 'react';\nconst Card = ({ name }) => {\n  const [count, setCount] = useState(0);\n  return <div><h2>{name}</h2><p>{count}</p><button onClick={() => setCount(count + 1)}>點擊</button></div>;\n};",
        "suggestedTimeline": "建議第 6 週學習，約 3 小時",
        "applicationScenarios": ["用戶資訊卡", "交互組件", "狀態追踪"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 15,
        "title": "npm 套件管理基礎",
        "level": "beginner",
        "category": "Tools",
        "slug": "npm-package-management-basics",
        "keywords": ["npm", "套件管理", "依賴", "基礎"],
        "description": "npm 如夜市攞販的食材庫管，管理工具與依賴。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單 React 項目（安裝 lodash）』為例，逐步介紹 npm 基礎操作（init、install）。步驟 1：初始化項目；步驟 2：安裝套件；步驟 3：使用套件。提供具體命令範例。考題：'如何更新套件？' 若有疑問請貼上［命令］，我將協助解答。",
        "exampleCode": "npm init -y\nnpm install lodash\nimport _ from 'lodash'; console.log(_.chunk([1, 2, 3], 2));",
        "suggestedTimeline": "建議第 6 週學習，約 2 小時",
        "applicationScenarios": ["項目依賴管理", "工具安裝", "簡單腳本"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 16,
        "title": "JavaScript 非同步進階 (async/await)",
        "level": "intermediate",
        "category": "JavaScript",
        "slug": "js-async-advanced",
        "keywords": ["JavaScript", "async/await", "非同步", "API"],
        "description": "async/await 如夜市攞販的順序點餐，提升非同步效率。",
        "prompt": "【請以劇場/比喻風格回應】以『從 API 獲取天氣資料』為例，逐步介紹 async/await 用法。步驟 1：定義異步函式；步驟 2：使用 await 獲取數據；步驟 3：處理結果。提供具體程式碼範例。考題：'如何處理異步錯誤？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "async function getWeather() {\n  const res = await fetch('https://api.weather.com');\n  const data = await res.json();\n  console.log(data);\n}",
        "suggestedTimeline": "建議第 7 週學習，約 3 小時",
        "applicationScenarios": ["天氣應用", "API 數據載入", "異步流程"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 17,
        "title": "React 事件處理基礎",
        "level": "beginner",
        "category": "React",
        "slug": "react-event-handling-basics",
        "keywords": ["React", "事件", "onClick", "基礎"],
        "description": "React 事件處理如夜市攞販的即時回應，增強交互性。",
        "prompt": "【請以劇場/比喻風格回應】以『一個點擊計數按鈕』為例，逐步介紹 React 事件處理（onClick）。步驟 1：創建組件；步驟 2：添加事件；步驟 3：更新狀態。提供具體程式碼範例。考題：'如何阻止事件冒泡？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "import React, { useState } from 'react';\nconst Button = () => {\n  const [count, setCount] = useState(0);\n  return <button onClick={() => setCount(count + 1)}>{count}</button>;\n};",
        "suggestedTimeline": "建議第 7 週學習，約 2 小時",
        "applicationScenarios": ["計數按鈕", "表單提交", "交互元素"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 18,
        "title": "React Hooks 基礎 (useState)",
        "level": "beginner",
        "category": "React",
        "slug": "react-hooks-usestate-basics",
        "keywords": ["React", "useState", "Hooks", "基礎"],
        "description": "useState 如夜市攞販的動態訂單，管理組件狀態。",
        "prompt": "【請以劇場/比喻風格回應】以『一個開關燈按鈕』為例，逐步介紹 useState 用法。步驟 1：引入 useState；步驟 2：設置狀態；步驟 3：切換狀態。提供具體程式碼範例。考題：'useState 如何初始化？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "import React, { useState } from 'react';\nconst Light = () => {\n  const [isOn, setIsOn] = useState(false);\n  return <button onClick={() => setIsOn(!isOn)}>{isOn ? '開' : '關'}</button>;\n};",
        "suggestedTimeline": "建議第 7 週學習，約 2 小時",
        "applicationScenarios": ["開關切換", "狀態追踪", "簡單交互"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 19,
        "title": "CSS 進階樣式技巧",
        "level": "intermediate",
        "category": "CSS",
        "slug": "css-advanced-styling",
        "keywords": ["CSS", "進階", "偽類", "動畫"],
        "description": "進階 CSS 如夜市攞販的華麗燈飾，提升視覺效果。",
        "prompt": "【請以劇場/比喻風格回應】以『一個懸停變色按鈕』為例，逐步介紹 CSS 偽類（:hover）與簡單動畫（transition）。步驟 1：設置基本樣式；步驟 2：添加偽類效果；步驟 3：加入動畫。提供具體程式碼範例。考題：'如何實現平滑過渡？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": ".btn { background-color: blue; transition: background-color 0.3s; }\n.btn:hover { background-color: red; }",
        "suggestedTimeline": "建議第 8 週學習，約 3 小時",
        "applicationScenarios": ["交互按鈕", "動態卡片", "視覺效果"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 20,
        "title": "React Hooks 進階 (useEffect)",
        "level": "intermediate",
        "category": "React",
        "slug": "react-hooks-useeffect-advanced",
        "keywords": ["React", "useEffect", "Hooks", "副作用"],
        "description": "useEffect 如夜市攞販的自動補貨，處理組件副作用。",
        "prompt": "【請以劇場/比喻風格回應】以『一個計時器（每秒更新）』為例，逐步介紹 useEffect 用法。步驟 1：引入 useEffect；步驟 2：設置計時器；步驟 3：清理資源。提供具體程式碼範例。考題：'如何避免無限循環？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "import React, { useState, useEffect } from 'react';\nconst Timer = () => {\n  const [time, setTime] = useState(0);\n  useEffect(() => {\n    const id = setInterval(() => setTime(t => t + 1), 1000);\n    return () => clearInterval(id);\n  }, []);\n  return <p>{time}</p>;\n};",
        "suggestedTimeline": "建議第 8 週學習，約 3 小時",
        "applicationScenarios": ["計時器", "數據更新", "副作用管理"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 21,
        "title": "React 樣式設計入門",
        "level": "beginner",
        "category": "React",
        "slug": "react-styling-intro",
        "keywords": ["React", "CSS", "樣式", "基礎"],
        "description": "React 樣式如夜市攞販的攤位裝飾，美化組件外觀。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單卡片組件』為例，逐步介紹 React 中的 CSS 樣式（內聯與外部）。步驟 1：創建組件；步驟 2：添加內聯樣式；步驟 3：引入外部 CSS。提供具體程式碼範例。考題：'內聯樣式與外部 CSS 差異？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "const Card = () => <div style={{ backgroundColor: 'blue', color: 'white' }}>卡片</div>;\n// card.css\n.card { background-color: blue; color: white; }",
        "suggestedTimeline": "建議第 8 週學習，約 2 小時",
        "applicationScenarios": ["卡片設計", "簡單組件", "樣式練習"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 22,
        "title": "React Router 基礎",
        "level": "intermediate",
        "category": "React",
        "slug": "react-router-basics",
        "keywords": ["React Router", "路由", "導航", "基礎"],
        "description": "React Router 如夜市攞販的導覽圖，實現頁面切換。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單多頁應用（首頁與關於）』為例，逐步介紹 React Router 用法。步驟 1：安裝 Router；步驟 2：設置路由；步驟 3：添加導航。提供具體程式碼範例。考題：'如何傳遞路由參數？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "import { BrowserRouter, Route, Link } from 'react-router-dom';\nconst App = () => (\n  <BrowserRouter><nav><Link to='/'>首頁</Link></nav><Route path='/' component={() => <h1>Home</h1>} /></BrowserRouter>\n);",
        "suggestedTimeline": "建議第 9 週學習，約 3 小時",
        "applicationScenarios": ["多頁應用", "導航系統", "頁面切換"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 23,
        "title": "React Context 入門",
        "level": "intermediate",
        "category": "React",
        "slug": "react-context-intro",
        "keywords": ["React", "Context", "全局狀態", "基礎"],
        "description": "Context 如夜市攞販的統一訂單，管理全局數據。",
        "prompt": "【請以劇場/比喻風格回應】以『一個主題切換器（明暗模式）』為例，逐步介紹 React Context 用法。步驟 1：創建 Context；步驟 2：提供狀態；步驟 3：消費狀態。提供具體程式碼範例。考題：'Context 與 Props 差異？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "import React, { createContext, useContext, useState } from 'react';\nconst ThemeContext = createContext();\nconst App = () => {\n  const [theme, setTheme] = useState('light');\n  return <ThemeContext.Provider value={{ theme, setTheme }}><Child /></ThemeContext.Provider>;\n};\nconst Child = () => { const { theme } = useContext(ThemeContext); return <p>{theme}</p>; };",
        "suggestedTimeline": "建議第 9 週學習，約 3 小時",
        "applicationScenarios": ["主題切換", "全局配置", "狀態共享"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 24,
        "title": "React Form 基礎",
        "level": "intermediate",
        "category": "React",
        "slug": "react-form-basics",
        "keywords": ["React", "表單", "輸入", "基礎"],
        "description": "React 表單如夜市攞販的訂單表，收集用戶輸入。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單登入表單（用戶名與密碼）』為例，逐步介紹 React 表單處理。步驟 1：創建表單組件；步驟 2：處理輸入；步驟 3：提交數據。提供具體程式碼範例。考題：'如何驗證表單？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "import React, { useState } from 'react';\nconst Login = () => {\n  const [form, setForm] = useState({ username: '', password: '' });\n  const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value });\n  return <form><input name='username' onChange={handleChange} /><input name='password' onChange={handleChange} /></form>;\n};",
        "suggestedTimeline": "建議第 9 週學習，約 3 小時",
        "applicationScenarios": ["登入表單", "註冊頁面", "數據收集"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 25,
        "title": "React 自訂 Hook 入門",
        "level": "intermediate",
        "category": "React",
        "slug": "react-custom-hooks-intro",
        "keywords": ["React", "自訂 Hook", "重用性", "基礎"],
        "description": "自訂 Hook 如夜市攞販的獨門醬料，提升程式碼重用性。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單計數器 Hook』為例，逐步介紹自訂 Hook 用法。步驟 1：定義 Hook；步驟 2：在組件中使用；步驟 3：測試功能。提供具體程式碼範例。考題：'自訂 Hook 的優勢是什麼？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "import { useState } from 'react';\nfunction useCounter() {\n  const [count, setCount] = useState(0);\n  return { count, increment: () => setCount(count + 1) };\n}\nconst Counter = () => {\n  const { count, increment } = useCounter();\n  return <button onClick={increment}>{count}</button>;\n};",
        "suggestedTimeline": "建議第 10 週學習，約 3 小時",
        "applicationScenarios": ["計數器", "重用邏輯", "模組化功能"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 26,
        "title": "Vite 快速構建入門",
        "level": "intermediate",
        "category": "Build Tools",
        "slug": "vite-quick-build-intro",
        "keywords": ["Vite", "構建", "熱重載", "基礎"],
        "description": "Vite 如夜市攞販的高速攤車，加速開發流程。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單 React 項目』為例，逐步介紹 Vite 構建。步驟 1：初始化 Vite 項目；步驟 2：配置基本設置；步驟 3：運行應用。提供具體程式碼範例。考題：'Vite 與 CRA 差異？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "npm create vite@latest my-app --template react\ncd my-app\nnpm install\nnpm run dev",
        "suggestedTimeline": "建議第 10 週學習，約 2 小時",
        "applicationScenarios": ["快速原型", "React 項目", "簡單應用"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 27,
        "title": "TypeScript 基礎",
        "level": "intermediate",
        "category": "JavaScript",
        "slug": "typescript-basics",
        "keywords": ["TypeScript", "類型", "基礎", "靜態檢查"],
        "description": "TypeScript 如夜市攞販的品質保證，增強程式穩定性。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單用戶資料函式』為例，逐步介紹 TypeScript 類型定義。步驟 1：設置環境；步驟 2：定義類型；步驟 3：應用類型。提供具體程式碼範例。考題：'TypeScript 如何提升程式品質？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "interface User { name: string; age: number; }\nfunction getUserInfo(user: User) {\n  return `${user.name}, ${user.age}`;\n}\nconsole.log(getUserInfo({ name: 'John', age: 25 }));",
        "suggestedTimeline": "建議第 10 週學習，約 4 小時",
        "applicationScenarios": ["用戶資料處理", "靜態檢查", "類型安全"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 28,
        "title": "React 效能優化基礎 (memo)",
        "level": "intermediate",
        "category": "React",
        "slug": "react-performance-memo-basics",
        "keywords": ["React", "memo", "效能", "基礎"],
        "description": "memo 如夜市攞販的快取食材，避免重複渲染。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單列表項』為例，逐步介紹 React.memo 用法。步驟 1：創建組件；步驟 2：應用 memo；步驟 3：測試效能。提供具體程式碼範例。考題：'memo 何時使用？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "import React, { memo } from 'react';\nconst Item = memo(({ text }) => <li>{text}</li>);\nconst List = () => <ul><Item text='Item 1' /></ul>;",
        "suggestedTimeline": "建議第 11 週學習，約 2 小時",
        "applicationScenarios": ["列表渲染", "靜態組件", "效能提升"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 29,
        "title": "Next.js 入門",
        "level": "intermediate",
        "category": "Frameworks",
        "slug": "nextjs-intro",
        "keywords": ["Next.js", "SSR", "靜態生成", "基礎"],
        "description": "Next.js 如夜市攞販的預製攤位，提升 SEO 與速度。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單靜態頁面（含 API 數據）』為例，逐步介紹 Next.js 基礎。步驟 1：創建 Next.js 項目；步驟 2：設置頁面；步驟 3：獲取數據。提供具體程式碼範例。考題：'SSR 與 SSG 差異？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "npx create-next-app my-app\n// pages/index.js\nexport async function getStaticProps() {\n  return { props: { message: 'Hello' } };\n}\nexport default function Home({ message }) {\n  return <h1>{message}</h1>;\n}",
        "suggestedTimeline": "建議第 11 週學習，約 4 小時",
        "applicationScenarios": ["靜態網站", "SEO 頁面", "簡單應用"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 30,
        "title": "Tailwind CSS 基礎",
        "level": "intermediate",
        "category": "CSS",
        "slug": "tailwind-css-basics",
        "keywords": ["Tailwind CSS", "工具類", "響應式", "基礎"],
        "description": "Tailwind CSS 如夜市攞販的萬用工具，快速設計介面。",
        "prompt": "【請以劇場/比喻風格回應】以『一個響應式卡片』為例，逐步介紹 Tailwind CSS 用法。步驟 1：設置 Tailwind；步驟 2：應用工具類；步驟 3：測試響應性。提供具體程式碼範例。考題：'如何自訂 Tailwind 樣式？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "<div class='bg-blue-500 text-white p-4 md:p-6'>卡片</div>",
        "suggestedTimeline": "建議第 11 週學習，約 3 小時",
        "applicationScenarios": ["響應式卡片", "快速佈局", "設計原型"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 31,
        "title": "Jest 測試入門",
        "level": "intermediate",
        "category": "Testing",
        "slug": "jest-testing-intro",
        "keywords": ["Jest", "測試", "單元測試", "基礎"],
        "description": "Jest 如夜市攞販的質檢員，確保程式碼品質。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單加法函式』為例，逐步介紹 Jest 單元測試。步驟 1：設置測試環境；步驟 2：撰寫測試用例；步驟 3：運行測試。提供具體程式碼範例。考題：'如何測試異步函式？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "function add(a, b) { return a + b; }\n// test.js\ntest('加法測試', () => { expect(add(1, 2)).toBe(3); });",
        "suggestedTimeline": "建議第 12 週學習，約 3 小時",
        "applicationScenarios": ["函式測試", "組件驗證", "品質保證"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 32,
        "title": "Webpack 打包入門",
        "level": "intermediate",
        "category": "Build Tools",
        "slug": "webpack-bundling-intro",
        "keywords": ["Webpack", "打包", "模組化", "基礎"],
        "description": "Webpack 如夜市攞販的打包專家，整合資源。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單 JS 與 CSS 項目』為例，逐步介紹 Webpack 打包。步驟 1：安裝 Webpack；步驟 2：配置檔案；步驟 3：運行打包。提供具體程式碼範例。考題：'如何處理 CSS 檔案？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "npm install webpack webpack-cli --save-dev\n// webpack.config.js\nmodule.exports = { entry: './src/index.js', output: { filename: 'bundle.js' } };",
        "suggestedTimeline": "建議第 12 週學習，約 3 小時",
        "applicationScenarios": ["簡單項目打包", "資源整合", "模組管理"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 33,
        "title": "Babel 轉譯基礎",
        "level": "intermediate",
        "category": "Build Tools",
        "slug": "babel-transpilation-basics",
        "keywords": ["Babel", "轉譯", "ES6", "基礎"],
        "description": "Babel 如夜市攞販的語言翻譯機，適配舊瀏覽器。",
        "prompt": "【請以劇場/比喻風格回應】以『一個 ES6 箭頭函式』為例，逐步介紹 Babel 轉譯。步驟 1：安裝 Babel；步驟 2：配置轉譯；步驟 3：測試結果。提供具體程式碼範例。考題：'如何處理 polyfill？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "npm install @babel/cli @babel/preset-env --save-dev\n// .babelrc\n{ \"presets\": [\"@babel/preset-env\"] }\n// src.js\nconst add = (a, b) => a + b;",
        "suggestedTimeline": "建議第 12 週學習，約 2 小時",
        "applicationScenarios": ["ES6 轉譯", "瀏覽器兼容", "新語法支持"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 34,
        "title": "ESLint 程式碼規範入門",
        "level": "intermediate",
        "category": "Tools",
        "slug": "eslint-code-style-intro",
        "keywords": ["ESLint", "規範", "品質", "基礎"],
        "description": "ESLint 如夜市攞販的衛生檢查員，確保程式碼規範。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單 JS 函式』為例，逐步介紹 ESLint 配置與使用。步驟 1：安裝 ESLint；步驟 2：設置規則；步驟 3：檢查程式碼。提供具體程式碼範例。考題：'如何忽略特定錯誤？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "npm install eslint --save-dev\nnpx eslint --init\n// .eslintrc.json\n{ \"rules\": { \"semi\": [\"error\", \"always\"] } }\n// index.js\nfunction add(a, b) { return a + b; }",
        "suggestedTimeline": "建議第 12 週學習，約 2 小時",
        "applicationScenarios": ["程式碼規範", "品質檢查", "團隊協作"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 35,
        "title": "Gatsby 靜態生成基礎",
        "level": "intermediate",
        "category": "Frameworks",
        "slug": "gatsby-static-generation-basics",
        "keywords": ["Gatsby", "靜態生成", "SEO", "基礎"],
        "description": "Gatsby 如夜市攞販的預製便當，加速網站載入。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單作品集頁面』為例，逐步介紹 Gatsby 靜態生成。步驟 1：安裝 Gatsby；步驟 2：創建頁面；步驟 3：生成靜態檔案。提供具體程式碼範例。考題：'Gatsby 如何提升效能？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "npm install gatsby\n// pages/index.js\nexport default function Portfolio() {\n  return <h1>我的作品集</h1>;\n}\ngatsby build",
        "suggestedTimeline": "建議第 12 週學習，約 4 小時",
        "applicationScenarios": ["作品集網站", "靜態部落格", "SEO 頁面"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 36,
        "title": "Vue.js 基礎",
        "level": "intermediate",
        "category": "Frameworks",
        "slug": "vuejs-basics",
        "keywords": ["Vue.js", "組件", "響應式", "基礎"],
        "description": "Vue.js 如夜市攞販的靈活攤位，打造響應式應用。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單計數器』為例，逐步介紹 Vue.js 基礎。步驟 1：設置 Vue 項目；步驟 2：創建組件；步驟 3：實現響應式。提供具體程式碼範例。考題：'Vue 的雙向綁定如何實現？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "<script src='https://cdn.jsdelivr.net/npm/vue@2'></script>\n<div id='app'><button @click='count++'>{{ count }}</button></div>\n<script>\nnew Vue({ el: '#app', data: { count: 0 } });\n</script>",
        "suggestedTimeline": "建議第 12 週學習，約 4 小時",
        "applicationScenarios": ["計數器應用", "簡單頁面", "響應式設計"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 37,
        "title": "Cypress 測試基礎",
        "level": "intermediate",
        "category": "Testing",
        "slug": "cypress-testing-basics",
        "keywords": ["Cypress", "端到端測試", "E2E", "基礎"],
        "description": "Cypress 如夜市攞販的顧客模擬員，測試應用流程。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單登入表單』為例，逐步介紹 Cypress 端到端測試。步驟 1：安裝 Cypress；步驟 2：撰寫測試；步驟 3：運行測試。提供具體程式碼範例。考題：'如何模擬用戶輸入？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "npm install cypress --save-dev\n// cypress/integration/login.spec.js\ndescribe('登入測試', () => {\n  it('應提交表單', () => {\n    cy.visit('/login');\n    cy.get('#username').type('user');\n    cy.get('button').click();\n  });\n});",
        "suggestedTimeline": "建議第 12 週學習，約 3 小時",
        "applicationScenarios": ["表單測試", "頁面流程", "應用驗證"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 38,
        "title": "React Native 基礎",
        "level": "intermediate",
        "category": "Mobile",
        "slug": "react-native-basics",
        "keywords": ["React Native", "移動應用", "跨平台", "基礎"],
        "description": "React Native 如夜市攞販的行動餐車，打造移動應用。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單計數器應用』為例，逐步介紹 React Native 基礎。步驟 1：設置環境；步驟 2：創建組件；步驟 3：運行應用。提供具體程式碼範例。考題：'React Native 與 React 差異？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "npx react-native init MyApp\n// App.js\nimport React, { useState } from 'react';\nimport { View, Text, Button } from 'react-native';\nconst App = () => {\n  const [count, setCount] = useState(0);\n  return <View><Text>{count}</Text><Button title='加一' onPress={() => setCount(count + 1)} /></View>;\n};",
        "suggestedTimeline": "建議第 12 週學習，約 4 小時",
        "applicationScenarios": ["計數器 App", "簡單移動應用", "跨平台原型"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 39,
        "title": "Astro 靜態網站基礎",
        "level": "intermediate",
        "category": "Frameworks",
        "slug": "astro-static-site-basics",
        "keywords": ["Astro", "靜態網站", "生成", "基礎"],
        "description": "Astro 如夜市攞販的預製攤位，生成高效靜態頁面。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單部落格頁面』為例，逐步介紹 Astro 靜態生成。步驟 1：安裝 Astro；步驟 2：創建頁面；步驟 3：生成靜態檔案。提供具體程式碼範例。考題：'Astro 如何提升載入速度？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "npm create astro@latest\n// pages/index.astro\n---\nexport default function Index() {\n  return <h1>部落格</h1>;\n}\n---",
        "suggestedTimeline": "建議第 12 週學習，約 3 小時",
        "applicationScenarios": ["部落格網站", "靜態頁面", "SEO 優化"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 40,
        "title": "Serverless 入門",
        "level": "intermediate",
        "category": "Backend",
        "slug": "serverless-basics",
        "keywords": ["Serverless", "AWS Lambda", "雲端", "基礎"],
        "description": "Serverless 如夜市攞販的自動化廚房，無伺服器運行。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單問候 API』為例，逐步介紹 Serverless 用法（以 AWS Lambda 為例）。步驟 1：設置 Lambda 函式；步驟 2：撰寫代碼；步驟 3：部署測試。提供具體程式碼範例。考題：'Serverless 的優勢是什麼？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "exports.handler = async () => {\n  return { statusCode: 200, body: JSON.stringify({ message: 'Hello!' }) };\n};",
        "suggestedTimeline": "建議第 12 週學習，約 3 小時",
        "applicationScenarios": ["簡單 API", "事件處理", "雲端服務"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 41,
        "title": "Docker 容器化入門",
        "level": "advanced",
        "category": "DevOps",
        "slug": "docker-containerization-intro",
        "keywords": ["Docker", "容器化", "部署", "基礎"],
        "description": "Docker 如夜市攞販的標準化攤位，確保環境一致。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單 Node.js 應用』為例，逐步介紹 Docker 容器化。步驟 1：安裝 Docker；步驟 2：撰寫 Dockerfile；步驟 3：運行容器。提供具體程式碼範例。考題：'Docker 如何提升部署效率？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "FROM node:16\nWORKDIR /app\nCOPY . .\nCMD ['node', 'index.js']\n// Build & Run\ndocker build -t my-app .\ndocker run my-app",
        "suggestedTimeline": "建議第 12 週學習，約 4 小時",
        "applicationScenarios": ["應用部署", "環境一致性", "開發測試"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 42,
        "title": "微前端架構基礎",
        "level": "advanced",
        "category": "Architecture",
        "slug": "micro-frontend-basics",
        "keywords": ["微前端", "模組化", "架構", "基礎"],
        "description": "微前端如夜市攞販的模組化拼盤，提升應用靈活性。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單儀表板（含獨立模組）』為例，逐步介紹微前端基礎。步驟 1：設置主應用；步驟 2：創建微應用；步驟 3：整合運行。提供具體程式碼範例。考題：'微前端的挑戰是什麼？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "// main-app\nimport MicroApp from 'micro-app';\nconst Dashboard = () => <MicroApp src='http://micro-app.com' />;",
        "suggestedTimeline": "建議第 12 週學習，約 5 小時",
        "applicationScenarios": ["儀表板應用", "模組化系統", "團隊協作"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 43,
        "title": "GraphQL 查詢入門",
        "level": "intermediate",
        "category": "API",
        "slug": "graphql-query-basics",
        "keywords": ["GraphQL", "查詢", "API", "基礎"],
        "description": "GraphQL 如夜市攞販的自選菜單，按需索取數據。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單用戶查詢（姓名與年齡）』為例，逐步介紹 GraphQL 查詢。步驟 1：定義查詢；步驟 2：設置客戶端；步驟 3：獲取數據。提供具體程式碼範例。考題：'GraphQL 與 REST 差異？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "import { gql, useQuery } from '@apollo/client';\nconst GET_USER = gql`query { user(id: 1) { name age } }`;\nconst User = () => {\n  const { data } = useQuery(GET_USER);\n  return <p>{data?.user.name}</p>;\n};",
        "suggestedTimeline": "建議第 12 週學習，約 3 小時",
        "applicationScenarios": ["用戶資料查詢", "API 數據獲取", "靈活查詢"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 44,
        "title": "D3.js 可視化入門",
        "level": "advanced",
        "category": "Visualization",
        "slug": "d3js-visualization-intro",
        "keywords": ["D3.js", "可視化", "圖表", "基礎"],
        "description": "D3.js 如夜市攞販的數據畫板，展示生動圖表。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單柱狀圖』為例，逐步介紹 D3.js 用法。步驟 1：引入 D3；步驟 2：繪製圖表；步驟 3：添加數據。提供具體程式碼範例。考題：'D3 如何處理動態數據？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "<script src='https://d3js.org/d3.v7.min.js'></script>\n<svg width='200' height='100'></svg>\n<script>\nconst data = [10, 20, 30];\nd3.select('svg').selectAll('rect').data(data).enter().append('rect').attr('width', d => d * 5).attr('height', 20).attr('y', (d, i) => i * 25);\n</script>",
        "suggestedTimeline": "建議第 12 週學習，約 4 小時",
        "applicationScenarios": ["數據圖表", "報表展示", "視覺化分析"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 45,
        "title": "WebAssembly 入門",
        "level": "advanced",
        "category": "Performance",
        "slug": "webassembly-intro",
        "keywords": ["WebAssembly", "WASM", "高性能", "基礎"],
        "description": "WebAssembly 如夜市攞販的火箭引擎，加速應用效能。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單加法函式』為例，逐步介紹 WebAssembly 用法。步驟 1：撰寫 C 代碼；步驟 2：編譯為 WASM；步驟 3：整合到 JS。提供具體程式碼範例。考題：'WASM 如何提升效能？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "// add.c\nint add(int a, int b) { return a + b; }\n// Compile: emcc add.c -s EXPORTED_FUNCTIONS='[\"_add\"]' -o add.js\n// index.js\nconst wasm = await WebAssembly.instantiateStreaming(fetch('add.wasm'), {});\nconsole.log(wasm.instance.exports.add(2, 3));",
        "suggestedTimeline": "建議第 12 週學習，約 5 小時",
        "applicationScenarios": ["高效計算", "遊戲邏輯", "數據處理"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 46,
        "title": "Framer Motion 動畫入門",
        "level": "intermediate",
        "category": "Animation",
        "slug": "framer-motion-animation-intro",
        "keywords": ["Framer Motion", "動畫", "React", "基礎"],
        "description": "Framer Motion 如夜市攞販的燈光秀，增添視覺效果。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單淡入按鈕』為例，逐步介紹 Framer Motion 用法。步驟 1：安裝 Framer Motion；步驟 2：創建動畫組件；步驟 3：測試效果。提供具體程式碼範例。考題：'如何調整動畫速度？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "npm install framer-motion\nimport { motion } from 'framer-motion';\nconst Button = () => <motion.button initial={{ opacity: 0 }} animate={{ opacity: 1 }}>點我</motion.button>;",
        "suggestedTimeline": "建議第 12 週學習，約 3 小時",
        "applicationScenarios": ["淡入效果", "頁面過渡", "交互動畫"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 47,
        "title": "Socket.io 即時通訊入門",
        "level": "intermediate",
        "category": "Communication",
        "slug": "socketio-real-time-communication-intro",
        "keywords": ["Socket.io", "即時通訊", "WebSocket", "基礎"],
        "description": "Socket.io 如夜市攞販的即時喊話，實現雙向通訊。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單聊天訊息』為例，逐步介紹 Socket.io 用法。步驟 1：設置服務端；步驟 2：連接客戶端；步驟 3：發送訊息。提供具體程式碼範例。考題：'如何處理斷線重連？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "// server.js\nconst io = require('socket.io')(3000);\nio.on('connection', socket => socket.on('message', msg => io.emit('message', msg)));\n// client.js\nconst socket = io('http://localhost:3000');\nsocket.on('message', msg => console.log(msg));",
        "suggestedTimeline": "建議第 12 週學習，約 4 小時",
        "applicationScenarios": ["聊天室", "即時通知", "雙向通訊"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 48,
        "title": "Firebase 數據同步基礎",
        "level": "intermediate",
        "category": "Backend",
        "slug": "firebase-data-sync-basics",
        "keywords": ["Firebase", "數據同步", "實時", "基礎"],
        "description": "Firebase 如夜市攞販的雲端訂單簿，實現實時同步。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單待辦清單』為例，逐步介紹 Firebase 數據同步。步驟 1：設置 Firebase；步驟 2：寫入數據；步驟 3：監聽更新。提供具體程式碼範例。考題：'如何處理離線數據？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "import { initializeApp } from 'firebase/app';\nimport { getFirestore, onSnapshot, collection } from 'firebase/firestore';\nconst db = getFirestore();\nonSnapshot(collection(db, 'todos'), snapshot => snapshot.docs.forEach(doc => console.log(doc.data())));",
        "suggestedTimeline": "建議第 12 週學習，約 3 小時",
        "applicationScenarios": ["待辦清單", "實時數據", "雲端同步"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 49,
        "title": "AWS Amplify 入門",
        "level": "advanced",
        "category": "Full Stack",
        "slug": "aws-amplify-basics",
        "keywords": ["AWS Amplify", "全端", "雲端", "基礎"],
        "description": "AWS Amplify 如夜市攞販的全能工具箱，快速構建全端應用。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單用戶認證』為例，逐步介紹 AWS Amplify 用法。步驟 1：初始化 Amplify；步驟 2：設置認證；步驟 3：測試登入。提供具體程式碼範例。考題：'Amplify 如何簡化開發？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "npm install -g @aws-amplify/cli\namplify init\namplify add auth\n// App.js\nimport { Amplify, Auth } from 'aws-amplify';\nAmplify.configure({ Auth: { region: 'us-east-1' } });\nconst login = async () => await Auth.signIn('user', 'pass');",
        "suggestedTimeline": "建議第 12 週學習，約 5 小時",
        "applicationScenarios": ["用戶認證", "全端應用", "雲端部署"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 50,
        "title": "AI 整合基礎",
        "level": "advanced",
        "category": "AI",
        "slug": "ai-integration-basics",
        "keywords": ["AI", "ChatGPT", "整合", "基礎"],
        "description": "AI 整合如夜市攞販的智能助手，提升應用互動性。",
        "prompt": "【請以劇場/比喻風格回應】以『一個簡單問答介面』為例，逐步介紹與 ChatGPT API 整合。步驟 1：設置 API；步驟 2：發送請求；步驟 3：展示回應。提供具體程式碼範例。考題：'如何優化 AI 回應速度？' 若有疑問請貼上［程式碼］，我將協助解答。",
        "exampleCode": "const fetchAIResponse = async (input) => {\n  const res = await fetch('https://api.openai.com/v1/chat/completions', {\n    method: 'POST',\n    headers: { 'Authorization': 'Bearer YOUR_API_KEY' },\n    body: JSON.stringify({ prompt: input })\n  });\n  const data = await res.json();\n  return data.choices[0].text;\n};",
        "suggestedTimeline": "建議第 12 週學習，約 4 小時",
        "applicationScenarios": ["問答系統", "智能客服", "內容生成"],
        "lastUpdated": "2025-03-01"
      }
    ]
  },
  "practicalApplication": {
    "overview": "提供 50 個真實的前端應用場景，幫助開發者將技術應用於實際專案，涵蓋商業與個人需求。",
    "recommendedFor": {
      "beginner": [1, 40, 42],
      "intermediate": [2, 5, 10],
      "advanced": [3, 7, 14]
    },
    "items": [
      {
        "number": 1,
        "title": "企業官網開發",
        "level": "intermediate",
        "category": "Web Development",
        "slug": "corporate-website-development",
        "keywords": ["React", "Tailwind CSS", "企業官網", "響應式"],
        "description": "打造企業官網，如台北街頭的品牌櫥窗，展示專業形象。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Tailwind CSS，依據條例生成企業官網程式碼：1. 頁面結構（首頁、關於、服務、聯絡）；2. 配色與字體；3. 互動效果（滑動、懸停）。貼上需求：［條例描述，例如：藍色調 #007BFF、字體 Roboto］。",
        "exampleCode": "import React from 'react';\nconst Home = () => (\n  <div className='bg-blue-500 text-white p-4'><h1 className='font-roboto'>企業首頁</h1></div>\n);\nexport default Home;",
        "applicationScenarios": ["中小企業官網", "品牌展示頁", "聯絡頁面"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 2,
        "title": "電子商務平台前端",
        "level": "advanced",
        "category": "E-commerce",
        "slug": "ecommerce-platform-frontend",
        "keywords": ["React", "Redux", "電商", "購物車"],
        "description": "打造電商平台前端，如高雄夜市的無障礙購物街。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Redux，依據條例生成電商前端程式碼：1. 產品展示；2. 購物車；3. 結帳流程。貼上需求：［條例描述，例如：產品卡片含圖片與價格、綠色主題 #28A745］。",
        "exampleCode": "const Product = ({ name, price }) => (\n  <div className='bg-green-500 p-2'><h3>{name}</h3><p>${price}</p></div>\n);",
        "applicationScenarios": ["線上商店", "產品目錄", "結帳系統"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 3,
        "title": "線上教育平台",
        "level": "advanced",
        "category": "Education",
        "slug": "online-education-platform",
        "keywords": ["React", "React Query", "教育平台", "課程"],
        "description": "打造教育平台，如台南老屋改建的數位教室。",
        "prompt": "【零代碼提示 🚀】使用 React 和 React Query，依據條例生成教育平台程式碼：1. 課程與影片；2. 測驗系統；3. 討論區。貼上需求：［條例描述，例如：藍灰配色 #4682B4、含 YouTube 嵌入］。",
        "exampleCode": "import { useQuery } from 'react-query';\nconst Courses = () => {\n  const { data } = useQuery('courses', fetchCourses);\n  return <div className='bg-blue-600'>{data?.map(c => <p>{c.title}</p>)}</div>;\n};",
        "applicationScenarios": ["線上課程", "學習管理系統", "學生論壇"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 4,
        "title": "社交媒體平台",
        "level": "advanced",
        "category": "Social Media",
        "slug": "social-media-platform",
        "keywords": ["React", "WebSocket", "社交媒體", "即時"],
        "description": "打造社交平台，如台中花博的熱鬧社群。",
        "prompt": "【零代碼提示 🚀】使用 React 和 WebSocket，依據條例生成社交平台程式碼：1. 動態消息；2. 好友追蹤；3. 評論互動。貼上需求：［條例描述，例如：紫色主題 #800080、支援即時聊天］。",
        "exampleCode": "const Feed = () => {\n  const [posts, setPosts] = useState([]);\n  useEffect(() => { socket.on('newPost', post => setPosts([...posts, post])); }, [posts]);\n  return <div className='bg-purple-800'>{posts.map(p => <p>{p.text}</p>)}</div>;\n};",
        "applicationScenarios": ["社交動態", "即時聊天", "用戶互動"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 5,
        "title": "任務管理工具",
        "level": "intermediate",
        "category": "Productivity",
        "slug": "task-management-tool",
        "keywords": ["React", "Drag-and-Drop", "任務管理"],
        "description": "打造任務管理工具，如台北捷運站的數位看板。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Drag-and-Drop 庫（如 react-beautiful-dnd），依據條例生成任務管理程式碼：1. 拖拉排序；2. 任務分組；3. 即時同步。貼上需求：［條例描述，例如：橙色調 #FFA500、三欄設計］。",
        "exampleCode": "import { Draggable } from 'react-beautiful-dnd';\nconst Task = ({ task }) => (\n  <Draggable draggableId={task.id}><div className='bg-orange-500 p-2'>{task.title}</div></Draggable>\n);",
        "applicationScenarios": ["個人待辦", "團隊任務", "敏捷開發"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 6,
        "title": "預約與票務系統",
        "level": "intermediate",
        "category": "Booking",
        "slug": "booking-ticketing-system",
        "keywords": ["React", "React Hook Form", "票務", "預約"],
        "description": "打造票務平台，如夜市電影院的線上訂票系統。",
        "prompt": "【零代碼提示 🚀】使用 React 和 React Hook Form，依據條例生成票務系統程式碼：1. 座位選擇；2. 訂單管理；3. 支付整合。貼上需求：［條例描述，例如：紅色調 #FF4500、支援信用卡支付］。",
        "exampleCode": "import { useForm } from 'react-hook-form';\nconst Booking = () => {\n  const { register, handleSubmit } = useForm();\n  return <form onSubmit={handleSubmit(data => console.log(data))}><input {...register('seat')} /></form>;\n};",
        "applicationScenarios": ["電影票務", "活動預約", "座位管理"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 7,
        "title": "企業內部 CRM",
        "level": "advanced",
        "category": "Business",
        "slug": "internal-crm",
        "keywords": ["React", "Redux", "CRM", "資料管理"],
        "description": "打造 CRM，如夜市攞販的智慧客戶管理大腦。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Redux，依據條例生成 CRM 程式碼：1. 客戶資料管理；2. 聯絡記錄；3. 報表分析。貼上需求：［條例描述，例如：藍色調 #1E90FF、含圖表展示］。",
        "exampleCode": "const ClientList = ({ clients }) => (\n  <div className='bg-blue-500'>{clients.map(c => <p>{c.name}</p>)}</div>\n);",
        "applicationScenarios": ["客戶關係管理", "銷售追踪", "數據報表"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 8,
        "title": "在線客服系統",
        "level": "intermediate",
        "category": "Customer Support",
        "slug": "online-customer-service",
        "keywords": ["React", "Socket.io", "客服", "即時"],
        "description": "打造客服平台，如 24 小時不打烊的夜市服務中心。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Socket.io，依據條例生成客服系統程式碼：1. 聊天介面；2. 自動回覆；3. 工單生成。貼上需求：［條例描述，例如：綠色調 #32CD32、支援即時聊天］。",
        "exampleCode": "const Chat = () => {\n  const [messages, setMessages] = useState([]);\n  useEffect(() => { socket.on('message', msg => setMessages([...messages, msg])); }, [messages]);\n  return <div className='bg-green-500'>{messages.map(m => <p>{m}</p>)}</div>;\n};",
        "applicationScenarios": ["即時客服", "工單管理", "用戶支援"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 9,
        "title": "即時通訊應用",
        "level": "advanced",
        "category": "Communication",
        "slug": "real-time-messaging-app",
        "keywords": ["React", "WebSocket", "通訊", "即時"],
        "description": "打造通訊應用，如夜市攞販間的即時喊話系統。",
        "prompt": "【零代碼提示 🚀】使用 React 和 WebSocket，依據條例生成通訊應用程式碼：1. 訊息介面；2. 傳輸與同步；3. 檔案分享。貼上需求：［條例描述，例如：灰藍調 #708090、支援圖片上傳］。",
        "exampleCode": "const Messages = () => {\n  const [msgs, setMsgs] = useState([]);\n  useEffect(() => { socket.on('msg', msg => setMsgs([...msgs, msg])); }, [msgs]);\n  return <div className='bg-gray-600'>{msgs.map(m => <p>{m}</p>)}</div>;\n};",
        "applicationScenarios": ["聊天應用", "檔案傳輸", "即時通訊"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 10,
        "title": "線上論壇系統",
        "level": "intermediate",
        "category": "Community",
        "slug": "online-forum-system",
        "keywords": ["React", "Firebase", "論壇", "討論"],
        "description": "打造論壇平台，如夜市美食街的網路聊天室。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Firebase，依據條例生成論壇系統程式碼：1. 分區與分類；2. 主題發布；3. 回覆互動。貼上需求：［條例描述，例如：橙色調 #FF8C00、支援即時更新］。",
        "exampleCode": "const Forum = () => {\n  const [posts, setPosts] = useState([]);\n  useEffect(() => { onSnapshot(collection(db, 'posts'), snap => setPosts(snap.docs.map(doc => doc.data()))); }, []);\n  return <div className='bg-orange-500'>{posts.map(p => <p>{p.title}</p>)}</div>;\n};",
        "applicationScenarios": ["討論區", "社群論壇", "問答平台"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 11,
        "title": "旅遊景點平台",
        "level": "intermediate",
        "category": "Travel",
        "slug": "tourism-platform",
        "keywords": ["React", "Google Maps", "旅遊", "地圖"],
        "description": "打造旅遊網站，如台灣夜市的美食地圖。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Google Maps API，依據條例生成旅遊平台程式碼：1. 景點展示；2. 用戶評論；3. 地圖定位。貼上需求：［條例描述，例如：綠色調 #228B22、含地圖功能］。",
        "exampleCode": "import GoogleMapReact from 'google-map-react';\nconst Map = () => (\n  <div style={{ height: '100vh' }} className='bg-green-600'><GoogleMapReact defaultCenter={{ lat: 25.033, lng: 121.565 }} defaultZoom={11} /></div>\n);",
        "applicationScenarios": ["旅遊指南", "地圖應用", "景點評論"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 12,
        "title": "多語系網站",
        "level": "intermediate",
        "category": "Web Development",
        "slug": "multilingual-website",
        "keywords": ["React", "i18next", "多語系", "國際化"],
        "description": "打造多語言網站，如夜市攞販的多國菜單。",
        "prompt": "【零代碼提示 🚀】使用 React 和 i18next，依據條例生成多語系網站程式碼：1. 語言切換；2. 資源管理；3. UI 調整。貼上需求：［條例描述，例如：藍色調 #4169E1、支援中文與英文］。",
        "exampleCode": "import i18n from 'i18next';\ni18n.init({ resources: { en: { translation: { hello: 'Hello' } }, zh: { translation: { hello: '你好' } } } });\nconst App = () => <div className='bg-blue-600'>{i18n.t('hello')}</div>;",
        "applicationScenarios": ["國際化網站", "多語言應用", "全球化頁面"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 13,
        "title": "響應式企業網站",
        "level": "intermediate",
        "category": "Web Development",
        "slug": "responsive-corporate-website",
        "keywords": ["React", "Tailwind CSS", "響應式", "企業"],
        "description": "打造響應式網站，如夜市攞販的數位名片。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Tailwind CSS，依據條例生成響應式網站程式碼：1. 桌面與行動介面；2. 自適應解析度；3. 品牌風格。貼上需求：［條例描述，例如：紫色調 #9932CC、含聯絡表單］。",
        "exampleCode": "const Site = () => (\n  <div className='bg-purple-500 p-4 md:p-6'><h1 className='text-white'>企業網站</h1></div>\n);",
        "applicationScenarios": ["企業形象頁", "響應式設計", "行動版網站"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 14,
        "title": "數據可視化儀表板",
        "level": "advanced",
        "category": "Data Visualization",
        "slug": "data-visualization-dashboard",
        "keywords": ["React", "D3.js", "數據可視化", "儀表板"],
        "description": "打造儀表板，如夜市攞販的營收控制台。",
        "prompt": "【零代碼提示 🚀】使用 React 和 D3.js，依據條例生成儀表板程式碼：1. 數據更新；2. 圖表展示；3. 報表生成。貼上需求：［條例描述，例如：藍綠調 #20B2AA、含折線圖］。",
        "exampleCode": "import * as d3 from 'd3';\nconst Chart = () => {\n  useEffect(() => {\n    d3.select('svg').append('line').attr('x1', 0).attr('x2', 100).attr('y1', 50).attr('y2', 50).attr('stroke', '#20B2AA');\n  }, []);\n  return <svg width='200' height='100' className='bg-teal-500'></svg>;\n};",
        "applicationScenarios": ["營收分析", "數據監控", "報表展示"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 15,
        "title": "部落格後台管理",
        "level": "intermediate",
        "category": "Content Management",
        "slug": "blog-admin-system",
        "keywords": ["React", "Firebase", "部落格", "後台"],
        "description": "打造後台系統，如夜市攞販的高效後廚。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Firebase，依據條例生成後台程式碼：1. 文章管理；2. 用戶管理；3. 評論審核。貼上需求：［條例描述，例如：灰色調 #696969、含即時儲存］。",
        "exampleCode": "const Admin = () => {\n  const [articles, setArticles] = useState([]);\n  useEffect(() => { onSnapshot(collection(db, 'articles'), snap => setArticles(snap.docs.map(doc => doc.data()))); }, []);\n  return <div className='bg-gray-600'>{articles.map(a => <p>{a.title}</p>)}</div>;\n};",
        "applicationScenarios": ["文章管理", "後台系統", "內容審核"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 16,
        "title": "在線投票平台",
        "level": "intermediate",
        "category": "Survey",
        "slug": "online-voting-platform",
        "keywords": ["React", "Chart.js", "投票", "統計"],
        "description": "打造投票平台，如夜市攞販的意見調查站。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Chart.js，依據條例生成投票平台程式碼：1. 問卷設計；2. 數據統計；3. 結果展示。貼上需求：［條例描述，例如：藍色調 #1E90FF、含柱狀圖］。",
        "exampleCode": "import { Bar } from 'react-chartjs-2';\nconst Vote = () => (\n  <div className='bg-blue-500'><Bar data={{ labels: ['A', 'B'], datasets: [{ data: [10, 20] }] }} /></div>\n);",
        "applicationScenarios": ["意見調查", "投票系統", "結果展示"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 17,
        "title": "在線預約系統",
        "level": "intermediate",
        "category": "Booking",
        "slug": "online-booking-system",
        "keywords": ["React", "React Hook Form", "預約", "日曆"],
        "description": "打造預約系統，如夜市美食攤的訂位平台。",
        "prompt": "【零代碼提示 🚀】使用 React 和 React Hook Form，依據條例生成預約系統程式碼：1. 預約流程；2. 日曆視圖；3. 提醒通知。貼上需求：［條例描述，例如：綠色調 #32CD32、含日期選擇器］。",
        "exampleCode": "import { useForm } from 'react-hook-form';\nconst Booking = () => {\n  const { register, handleSubmit } = useForm();\n  return <form onSubmit={handleSubmit(data => console.log(data))} className='bg-green-500'><input type='date' {...register('date')} /></form>;\n};",
        "applicationScenarios": ["餐廳預約", "活動訂位", "時間管理"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 18,
        "title": "社交活動平台",
        "level": "intermediate",
        "category": "Community",
        "slug": "social-event-platform",
        "keywords": ["React", "Firebase", "活動", "報名"],
        "description": "打造活動平台，如夜市攞販的社區公告欄。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Firebase，依據條例生成活動平台程式碼：1. 活動管理；2. 報名互動；3. 通知功能。貼上需求：［條例描述，例如：橙色調 #FF8C00、含即時通知］。",
        "exampleCode": "const Events = () => {\n  const [events, setEvents] = useState([]);\n  useEffect(() => { onSnapshot(collection(db, 'events'), snap => setEvents(snap.docs.map(doc => doc.data()))); }, []);\n  return <div className='bg-orange-500'>{events.map(e => <p>{e.name}</p>)}</div>;\n};",
        "applicationScenarios": ["活動報名", "社群活動", "通知系統"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 19,
        "title": "客服與工單系統",
        "level": "intermediate",
        "category": "Customer Support",
        "slug": "customer-service-ticketing",
        "keywords": ["React", "Socket.io", "客服", "工單"],
        "description": "打造客服系統，如夜市攞販的 24 小時服務站。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Socket.io，依據條例生成客服系統程式碼：1. 諮詢聊天；2. 工單追蹤；3. 自動回覆。貼上需求：［條例描述，例如：藍色調 #4682B4、含即時聊天］。",
        "exampleCode": "const Support = () => {\n  const [tickets, setTickets] = useState([]);\n  useEffect(() => { socket.on('ticket', ticket => setTickets([...tickets, ticket])); }, [tickets]);\n  return <div className='bg-blue-600'>{tickets.map(t => <p>{t.issue}</p>)}</div>;\n};",
        "applicationScenarios": ["客服聊天", "工單處理", "即時支援"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 20,
        "title": "移動端應用 UI",
        "level": "intermediate",
        "category": "Mobile",
        "slug": "mobile-app-ui",
        "keywords": ["React Native", "UI", "移動端"],
        "description": "打造移動 UI，如夜市攞販的行動菜單。",
        "prompt": "【零代碼提示 🚀】使用 React Native，依據條例生成移動 UI 程式碼：1. 原型設計；2. 直觀介面；3. 適配裝置。貼上需求：［條例描述，例如：紅色調 #FF4500、支援 iOS 與 Android］。",
        "exampleCode": "import { View, Text } from 'react-native';\nconst UI = () => (\n  <View style={{ backgroundColor: '#FF4500', padding: 10 }}><Text>移動 UI</Text></View>\n);",
        "applicationScenarios": ["移動原型", "簡單應用 UI", "跨平台設計"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 21,
        "title": "桌面應用界面 (Electron)",
        "level": "advanced",
        "category": "Desktop",
        "slug": "desktop-app-interface-electron",
        "keywords": ["Electron", "React", "桌面應用"],
        "description": "打造 Electron 應用，如夜市攞販的高端辦公工具。",
        "prompt": "【零代碼提示 🚀】使用 Electron 和 React，依據條例生成桌面應用程式碼：1. 介面設計；2. 功能分區；3. 後台整合。貼上需求：［條例描述，例如：灰色調 #696969、含檔案管理］。",
        "exampleCode": "import { ipcRenderer } from 'electron';\nconst Desktop = () => (\n  <div className='bg-gray-600'><button onClick={() => ipcRenderer.send('open-file')}>打開檔案</button></div>\n);",
        "applicationScenarios": ["檔案管理器", "桌面工具", "跨平台應用"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 22,
        "title": "第三方支付系統",
        "level": "advanced",
        "category": "Payment",
        "slug": "third-party-payment-system",
        "keywords": ["React", "Stripe", "支付"],
        "description": "打造支付系統，如夜市攞販的多功能收銀機。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Stripe，依據條例生成支付系統程式碼：1. 支付 API；2. 交易處理與安全。貼上需求：［條例描述，例如：綠色調 #32CD32、支援信用卡］。",
        "exampleCode": "import { loadStripe } from '@stripe/stripe-js';\nconst stripePromise = loadStripe('pk_test_xxx');\nconst Payment = () => (\n  <div className='bg-green-500'><button onClick={() => stripePromise.then(stripe => stripe.redirectToCheckout({ sessionId: 'xxx' }))}>支付</button></div>\n);",
        "applicationScenarios": ["線上支付", "交易處理", "結帳系統"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 23,
        "title": "第三方登入 (OAuth)",
        "level": "intermediate",
        "category": "Authentication",
        "slug": "third-party-oauth-login",
        "keywords": ["React", "OAuth", "登入"],
        "description": "打造 OAuth 登入，如夜市攞販的多重身份通行證。",
        "prompt": "【零代碼提示 🚀】使用 React 和 OAuth（如 Google OAuth），依據條例生成登入系統程式碼：1. OAuth 整合；2. 資料同步。貼上需求：［條例描述，例如：藍色調 #1E90FF、支援 Google 登入］。",
        "exampleCode": "import { GoogleLogin } from 'react-google-login';\nconst Login = () => (\n  <div className='bg-blue-500'><GoogleLogin clientId='xxx' onSuccess={res => console.log(res.profileObj)} /></div>\n);",
        "applicationScenarios": ["用戶認證", "第三方登入", "快速註冊"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 24,
        "title": "電子郵件通知系統",
        "level": "intermediate",
        "category": "Notification",
        "slug": "email-notification-system",
        "keywords": ["React", "Node.js", "郵件"],
        "description": "打造郵件系統，如夜市攞販的自動優惠推送。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Node.js（含 nodemailer），依據條例生成郵件系統程式碼：1. 內容生成；2. 定時發送。貼上需求：［條例描述，例如：橙色調 #FFA500、每日發送］。",
        "exampleCode": "const nodemailer = require('nodemailer');\nconst transport = nodemailer.createTransport({ service: 'gmail', auth: { user: 'xxx', pass: 'xxx' } });\ntransport.sendMail({ to: 'user@example.com', subject: '通知', text: 'Hello' });",
        "applicationScenarios": ["促銷通知", "訂單確認", "定時郵件"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 25,
        "title": "內容管理系統 (CMS)",
        "level": "advanced",
        "category": "Content Management",
        "slug": "content-management-system",
        "keywords": ["React", "Firebase", "CMS"],
        "description": "打造 CMS，如夜市攞販的線上雜誌編輯室。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Firebase，依據條例生成 CMS 程式碼：1. 文章編輯；2. 分類搜尋；3. 權限管理。貼上需求：［條例描述，例如：藍色調 #4169E1、含管理員權限］。",
        "exampleCode": "const CMS = () => {\n  const [posts, setPosts] = useState([]);\n  useEffect(() => { onSnapshot(collection(db, 'posts'), snap => setPosts(snap.docs.map(doc => doc.data()))); }, []);\n  return <div className='bg-blue-600'>{posts.map(p => <p>{p.title}</p>)}</div>;\n};",
        "applicationScenarios": ["文章管理", "內容編輯", "權限控制"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 26,
        "title": "線上音樂平台",
        "level": "advanced",
        "category": "Multimedia",
        "slug": "online-music-platform",
        "keywords": ["React", "Web Audio", "音樂"],
        "description": "打造音樂平台，如夜市攞販的線上音樂會。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Web Audio API，依據條例生成音樂平台程式碼：1. 播放器與串流；2. 歌單管理；3. 用戶互動。貼上需求：［條例描述，例如：紫色調 #800080、支援 MP3 播放］。",
        "exampleCode": "const Player = () => {\n  const audio = new Audio('song.mp3');\n  return <div className='bg-purple-800'><button onClick={() => audio.play()}>播放</button></div>;\n};",
        "applicationScenarios": ["音樂播放", "歌單管理", "串流服務"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 27,
        "title": "在線視頻直播平台",
        "level": "advanced",
        "category": "Multimedia",
        "slug": "online-video-streaming-platform",
        "keywords": ["React", "WebRTC", "直播"],
        "description": "打造直播平台，如夜市的線上直播節目。",
        "prompt": "【零代碼提示 🚀】使用 React 和 WebRTC，依據條例生成直播平台程式碼：1. 直播流整合；2. 即時聊天；3. 評論回饋。貼上需求：［條例描述，例如：紅色調 #FF4500、支援即時評論］。",
        "exampleCode": "const Stream = () => {\n  const [stream, setStream] = useState(null);\n  useEffect(() => { navigator.mediaDevices.getUserMedia({ video: true }).then(s => setStream(s)); }, []);\n  return <div className='bg-red-500'><video ref={video => video && (video.srcObject = stream)} autoPlay /></div>;\n};",
        "applicationScenarios": ["直播節目", "視訊聊天", "互動直播"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 28,
        "title": "用戶行為分析系統",
        "level": "advanced",
        "category": "Analytics",
        "slug": "user-behavior-analytics",
        "keywords": ["React", "D3.js", "分析", "行為"],
        "description": "打造分析系統，如夜市攞販的顧客行為洞察。",
        "prompt": "【零代碼提示 🚀】使用 React 和 D3.js，依據條例生成分析系統程式碼：1. 數據收集；2. 分析預測；3. 圖表展示。貼上需求：［條例描述，例如：藍綠調 #20B2AA、含熱力圖］。",
        "exampleCode": "import * as d3 from 'd3';\nconst Analytics = () => {\n  useEffect(() => {\n    d3.select('svg').append('rect').attr('width', 50).attr('height', 50).attr('fill', '#20B2AA');\n  }, []);\n  return <svg width='200' height='200' className='bg-teal-500'></svg>;\n};",
        "applicationScenarios": ["行為分析", "數據洞察", "熱力圖展示"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 29,
        "title": "企業協作平台",
        "level": "advanced",
        "category": "Collaboration",
        "slug": "enterprise-collaboration-platform",
        "keywords": ["React", "Socket.io", "協作"],
        "description": "打造協作平台，如夜市攞販的數位會議室。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Socket.io，依據條例生成協作平台程式碼：1. 文件共享；2. 任務分派；3. 即時聊天。貼上需求：［條例描述，例如：灰藍調 #708090、支援即時協作］。",
        "exampleCode": "const Collab = () => {\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => { socket.on('task', task => setTasks([...tasks, task])); }, [tasks]);\n  return <div className='bg-gray-600'>{tasks.map(t => <p>{t.name}</p>)}</div>;\n};",
        "applicationScenarios": ["團隊協作", "任務管理", "文件共享"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 30,
        "title": "自訂化儀表板",
        "level": "advanced",
        "category": "Data Visualization",
        "slug": "customizable-dashboard",
        "keywords": ["React", "Chart.js", "儀表板"],
        "description": "打造儀表板，如夜市攞販的專屬數據中心。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Chart.js，依據條例生成儀表板程式碼：1. 自訂圖表；2. 報表生成。貼上需求：［條例描述，例如：藍色調 #1E90FF、含圓環圖］。",
        "exampleCode": "import { Doughnut } from 'react-chartjs-2';\nconst Dashboard = () => (\n  <div className='bg-blue-500'><Doughnut data={{ labels: ['A', 'B'], datasets: [{ data: [30, 70] }] }} /></div>\n);",
        "applicationScenarios": ["數據儀表板", "報表展示", "自訂分析"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 31,
        "title": "聊天機器人系統",
        "level": "advanced",
        "category": "AI",
        "slug": "chatbot-system",
        "keywords": ["React", "ChatGPT", "聊天"],
        "description": "打造聊天機器人，如夜市攞販的全天候客服。",
        "prompt": "【零代碼提示 🚀】使用 React 和 ChatGPT API，依據條例生成聊天機器人程式碼：1. 自動回覆；2. 客服後台。貼上需求：［條例描述，例如：綠色調 #32CD32、支援語音輸入］。",
        "exampleCode": "const Chatbot = () => {\n  const [response, setResponse] = useState('');\n  const send = async () => {\n    const res = await fetch('https://api.openai.com/v1/chat/completions', { method: 'POST', body: JSON.stringify({ prompt: 'Hi' }) });\n    setResponse((await res.json()).choices[0].text);\n  };\n  return <div className='bg-green-500'><button onClick={send}>問</button><p>{response}</p></div>;\n};",
        "applicationScenarios": ["客服機器人", "問答系統", "智能對話"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 32,
        "title": "在線測驗平台",
        "level": "intermediate",
        "category": "Education",
        "slug": "online-quiz-platform",
        "keywords": ["React", "React Hook Form", "測驗"],
        "description": "打造測驗平台，如夜市攞販的數位考試站。",
        "prompt": "【零代碼提示 🚀】使用 React 和 React Hook Form，依據條例生成測驗平台程式碼：1. 題庫管理；2. 自動評分。貼上需求：［條例描述，例如：藍色調 #4682B4、含選擇題］。",
        "exampleCode": "import { useForm } from 'react-hook-form';\nconst Quiz = () => {\n  const { register, handleSubmit } = useForm();\n  return <form onSubmit={handleSubmit(data => console.log(data))} className='bg-blue-600'><input type='radio' {...register('q1')} /></form>;\n};",
        "applicationScenarios": ["線上測驗", "教育評估", "題庫管理"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 33,
        "title": "健身追蹤平台",
        "level": "intermediate",
        "category": "Health",
        "slug": "fitness-tracking-platform",
        "keywords": ["React", "Firebase", "健身"],
        "description": "打造健身平台，如夜市攞販的數位健身俱樂部。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Firebase，依據條例生成健身平台程式碼：1. 數據記錄；2. 分析報告；3. 社群互動。貼上需求：［條例描述，例如：橙色調 #FFA500、含步數追蹤］。",
        "exampleCode": "const Fitness = () => {\n  const [steps, setSteps] = useState([]);\n  useEffect(() => { onSnapshot(collection(db, 'steps'), snap => setSteps(snap.docs.map(doc => doc.data()))); }, []);\n  return <div className='bg-orange-500'>{steps.map(s => <p>{s.count}</p>)}</div>;\n};",
        "applicationScenarios": ["健身記錄", "步數追踪", "健康社群"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 34,
        "title": "智慧家居控制",
        "level": "advanced",
        "category": "IoT",
        "slug": "smart-home-control",
        "keywords": ["React", "IoT", "智慧家居"],
        "description": "打造家居系統，如夜市攞販的智能中控台。",
        "prompt": "【零代碼提示 🚀】使用 React 和 IoT 框架（如 AWS IoT），依據條例生成家居控制程式碼：1. IoT 整合；2. 遠端控制；3. 安全防護。貼上需求：［條例描述，例如：藍色調 #1E90FF、含燈光控制］。",
        "exampleCode": "const HomeControl = () => {\n  const toggleLight = () => fetch('https://iot.example.com/light', { method: 'POST', body: JSON.stringify({ on: true }) });\n  return <div className='bg-blue-500'><button onClick={toggleLight}>開燈</button></div>;\n};",
        "applicationScenarios": ["燈光控制", "遠端管理", "智能家居"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 35,
        "title": "餐廳預訂系統",
        "level": "intermediate",
        "category": "Booking",
        "slug": "restaurant-booking-system",
        "keywords": ["React", "React Hook Form", "預訂"],
        "description": "打造預訂系統，如夜市美食攤的數位訂位平台。",
        "prompt": "【零代碼提示 🚀】使用 React 和 React Hook Form，依據條例生成預訂系統程式碼：1. 訂位與座位；2. 點餐功能；3. 評價通知。貼上需求：［條例描述，例如：紅色調 #FF4500、含座位圖］。",
        "exampleCode": "import { useForm } from 'react-hook-form';\nconst Reservation = () => {\n  const { register, handleSubmit } = useForm();\n  return <form onSubmit={handleSubmit(data => console.log(data))} className='bg-red-500'><input {...register('seat')} /></form>;\n};",
        "applicationScenarios": ["餐廳訂位", "座位選擇", "點餐系統"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 36,
        "title": "移動支付應用",
        "level": "advanced",
        "category": "Payment",
        "slug": "mobile-payment-app",
        "keywords": ["React Native", "Stripe", "支付"],
        "description": "打造支付應用，如夜市攞販的電子錢包。",
        "prompt": "【零代碼提示 🚀】使用 React Native 和 Stripe，依據條例生成支付應用程式碼：1. 支付整合；2. 認證安全；3. 交易記錄。貼上需求：［條例描述，例如：綠色調 #32CD32、支援 QR 碼掃描］。",
        "exampleCode": "import { StripeProvider } from '@stripe/stripe-react-native';\nconst Payment = () => (\n  <StripeProvider publishableKey='pk_test_xxx'><View style={{ backgroundColor: '#32CD32' }}><Text>支付</Text></View></StripeProvider>\n);",
        "applicationScenarios": ["移動結帳", "QR 支付", "交易管理"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 37,
        "title": "地圖定位服務",
        "level": "advanced",
        "category": "Location",
        "slug": "map-location-service",
        "keywords": ["React", "Google Maps", "地圖"],
        "description": "打造定位應用，如夜市攞販的數位導航儀。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Google Maps API，依據條例生成定位服務程式碼：1. 地圖 API 整合；2. 搜尋與導航功能。貼上需求：［條例描述，例如：藍色調 #4169E1、含路線規劃與地標搜尋］。",
        "exampleCode": "import GoogleMapReact from 'google-map-react';\nconst Map = () => (\n  <div style={{ height: '100vh' }} className='bg-blue-600'><GoogleMapReact defaultCenter={{ lat: 25.033, lng: 121.565 }} defaultZoom={11} /></div>\n);",
        "applicationScenarios": ["地圖導航", "位置搜尋", "路線規劃"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 38,
        "title": "遊戲排行榜系統",
        "level": "intermediate",
        "category": "Gaming",
        "slug": "game-leaderboard-system",
        "keywords": ["React", "Firebase", "排行榜"],
        "description": "打造排行榜，如夜市攞販的線上競技平台。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Firebase，依據條例生成排行榜程式碼：1. 數據收集；2. 排行生成；3. 成就展示。貼上需求：［條例描述，例如：橙色調 #FF8C00、含即時排名與獎勵徽章］。",
        "exampleCode": "const Leaderboard = () => {\n  const [ranks, setRanks] = useState([]);\n  useEffect(() => { onSnapshot(collection(db, 'ranks'), snap => setRanks(snap.docs.map(doc => doc.data()))); }, []);\n  return <div className='bg-orange-500'>{ranks.map(r => <p>{r.score}</p>)}</div>;\n};",
        "applicationScenarios": ["遊戲排行", "競技系統", "成就展示"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 39,
        "title": "文件儲存平台",
        "level": "intermediate",
        "category": "Storage",
        "slug": "document-storage-platform",
        "keywords": ["React", "AWS S3", "文件"],
        "description": "打造儲存平台，如夜市攞販的雲端儲藏櫃。",
        "prompt": "【零代碼提示 🚀】使用 React 和 AWS S3，依據條例生成儲存平台程式碼：1. 文件管理；2. 權限設定；3. 分享連結。貼上需求：［條例描述，例如：藍色調 #1E90FF、支援 PDF 上傳與下載］。",
        "exampleCode": "const Storage = () => {\n  const upload = async (file) => {\n    const params = { Bucket: 'my-bucket', Key: file.name, Body: file };\n    await s3.upload(params).promise();\n  };\n  return <div className='bg-blue-500'><input type='file' onChange={e => upload(e.target.files[0])} /></div>;\n};",
        "applicationScenarios": ["文件儲存", "雲端管理", "檔案分享"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 40,
        "title": "個人作品集網站",
        "level": "beginner",
        "category": "Portfolio",
        "slug": "personal-portfolio-website",
        "keywords": ["React", "Tailwind CSS", "作品集"],
        "description": "打造作品集，如夜市攞販的數位名片。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Tailwind CSS，依據條例生成作品集程式碼：1. 作品展示；2. 技能介紹；3. 聯絡資訊。貼上需求：［條例描述，例如：紫色調 #800080、含三個作品與聯絡表單］。",
        "exampleCode": "const Portfolio = () => (\n  <div className='bg-purple-800 text-white p-4'><h1>我的作品集</h1><p>作品 1</p></div>\n);",
        "applicationScenarios": ["個人網站", "作品展示", "聯絡頁面"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 41,
        "title": "IoT 數據監控",
        "level": "advanced",
        "category": "IoT",
        "slug": "iot-data-monitoring",
        "keywords": ["React", "AWS IoT", "監控"],
        "description": "打造監控平台，如夜市攞販的智慧工廠中樞。",
        "prompt": "【零代碼提示 🚀】使用 React 和 AWS IoT，依據條例生成監控平台程式碼：1. IoT 整合；2. 數據監控；3. 報警展示。貼上需求：［條例描述，例如：藍綠調 #20B2AA、含溫度監控與警報通知］。",
        "exampleCode": "const IoT = () => {\n  const [temp, setTemp] = useState(0);\n  useEffect(() => { iot.subscribe('temp', msg => setTemp(msg.value)); }, []);\n  return <div className='bg-teal-500'><p>溫度: {temp}</p></div>;\n};",
        "applicationScenarios": ["溫度監控", "設備管理", "警報系統"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 42,
        "title": "零代碼網頁工具",
        "level": "beginner",
        "category": "No-Code",
        "slug": "no-code-web-tool",
        "keywords": ["React", "Drag-and-Drop", "零代碼"],
        "description": "打造網頁工具，如夜市攞販的積木拼裝站。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Drag-and-Drop 庫（如 react-beautiful-dnd），依據條例生成網頁工具程式碼：1. 拖拉介面；2. 模組組件；3. 互動功能。貼上需求：［條例描述，例如：灰色調 #696969、含文字與圖片模組］。",
        "exampleCode": "import { Draggable } from 'react-beautiful-dnd';\nconst Tool = () => (\n  <div className='bg-gray-600'><Draggable draggableId='block1'><div>文字模組</div></Draggable></div>\n);",
        "applicationScenarios": ["網頁設計工具", "零代碼原型", "模組化介面"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 43,
        "title": "零代碼博客平台",
        "level": "intermediate",
        "category": "No-Code",
        "slug": "no-code-blog-platform",
        "keywords": ["React", "Firebase", "博客"],
        "description": "打造博客平台，如夜市攞販的可視化日誌站。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Firebase，依據條例生成博客平台程式碼：1. 拖拉編輯；2. 內容管理；3. 主題選擇。貼上需求：［條例描述，例如：藍色調 #4682B4、支援三種主題與即時預覽］。",
        "exampleCode": "const Blog = () => {\n  const [posts, setPosts] = useState([]);\n  useEffect(() => { onSnapshot(collection(db, 'posts'), snap => setPosts(snap.docs.map(doc => doc.data()))); }, []);\n  return <div className='bg-blue-600'>{posts.map(p => <p>{p.title}</p>)}</div>;\n};",
        "applicationScenarios": ["博客編輯", "內容管理", "主題切換"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 44,
        "title": "工作流程自動化",
        "level": "advanced",
        "category": "Automation",
        "slug": "workflow-automation",
        "keywords": ["React", "Node.js", "自動化"],
        "description": "打造自動化平台，如夜市攞販的流程畫板。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Node.js，依據條例生成自動化平台程式碼：1. 流程設計；2. 模組規則；3. 提醒通知。貼上需求：［條例描述，例如：綠色調 #32CD32、含每日提醒與條件觸發］。",
        "exampleCode": "const Workflow = () => {\n  const schedule = () => setTimeout(() => alert('提醒'), 86400000);\n  return <div className='bg-green-500'><button onClick={schedule}>設置提醒</button></div>;\n};",
        "applicationScenarios": ["流程自動化", "提醒系統", "任務調度"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 45,
        "title": "雲端資料庫管理",
        "level": "advanced",
        "category": "Database",
        "slug": "cloud-database-management",
        "keywords": ["React", "Firebase", "資料庫"],
        "description": "打造資料庫平台，如夜市攞販的雲端數據中心。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Firebase，依據條例生成資料庫程式碼：1. 監控備份；2. 資料維護。貼上需求：［條例描述，例如：藍色調 #1E90FF、支援即時備份與數據視覺化］。",
        "exampleCode": "const DB = () => {\n  const [data, setData] = useState([]);\n  useEffect(() => { onSnapshot(collection(db, 'data'), snap => setData(snap.docs.map(doc => doc.data()))); }, []);\n  return <div className='bg-blue-500'>{data.map(d => <p>{d.value}</p>)}</div>;\n};",
        "applicationScenarios": ["數據管理", "雲端備份", "實時維護"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 46,
        "title": "零代碼移動應用",
        "level": "advanced",
        "category": "No-Code",
        "slug": "no-code-mobile-app",
        "keywords": ["React Native", "零代碼", "移動應用"],
        "description": "打造移動應用生成器，如夜市攞販的可視化設計站。",
        "prompt": "【零代碼提示 🚀】使用 React Native，依據條例生成移動應用程式碼：1. 模板選擇；2. 介面配置；3. 部署流程。貼上需求：［條例描述，例如：紅色調 #FF4500、支援三種模板與一鍵部署］。",
        "exampleCode": "const MobileApp = () => (\n  <View style={{ backgroundColor: '#FF4500' }}><Text>選擇模板</Text></View>\n);",
        "applicationScenarios": ["移動原型", "零代碼 App", "快速部署"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 47,
        "title": "內容生成平台",
        "level": "advanced",
        "category": "AI",
        "slug": "content-generation-platform",
        "keywords": ["React", "ChatGPT", "內容生成"],
        "description": "打造內容平台，如夜市攞販的 AI 文案助手。",
        "prompt": "【零代碼提示 🚀】使用 React 和 ChatGPT API，依據條例生成內容平台程式碼：1. AI 整合；2. 自動排版。貼上需求：［條例描述，例如：紫色調 #800080、支援文章生成與格式調整］。",
        "exampleCode": "const Content = () => {\n  const [text, setText] = useState('');\n  const generate = async () => {\n    const res = await fetch('https://api.openai.com/v1/chat/completions', { method: 'POST', body: JSON.stringify({ prompt: 'Generate' }) });\n    setText((await res.json()).choices[0].text);\n  };\n  return <div className='bg-purple-800'><button onClick={generate}>生成</button><p>{text}</p></div>;\n};",
        "applicationScenarios": ["文章生成", "內容創作", "自動排版"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 48,
        "title": "數據分析與預測",
        "level": "advanced",
        "category": "Analytics",
        "slug": "data-analysis-prediction",
        "keywords": ["React", "D3.js", "數據分析"],
        "description": "打造分析平台，如夜市攞販的智慧商業工具。",
        "prompt": "【零代碼提示 🚀】使用 React 和 D3.js，依據條例生成分析平台程式碼：1. 數據收集；2. 預測模型；3. 可視化展示。貼上需求：［條例描述，例如：藍綠調 #20B2AA、含趨勢線與數據預測］。",
        "exampleCode": "import * as d3 from 'd3';\nconst Analysis = () => {\n  useEffect(() => {\n    d3.select('svg').append('line').attr('x1', 0).attr('x2', 100).attr('y1', 50).attr('y2', 50).attr('stroke', '#20B2AA');\n  }, []);\n  return <svg width='200' height='100' className='bg-teal-500'></svg>;\n};",
        "applicationScenarios": ["趨勢分析", "商業預測", "數據視覺化"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 49,
        "title": "零代碼電商平台",
        "level": "advanced",
        "category": "No-Code",
        "slug": "no-code-ecommerce-platform",
        "keywords": ["React", "Redux", "電商"],
        "description": "打造電商平台，如夜市攞販的一站式購物中心。",
        "prompt": "【零代碼提示 🚀】使用 React 和 Redux，依據條例生成電商平台程式碼：1. 商品展示；2. 訂單支付；3. 物流管理。貼上需求：［條例描述，例如：綠色調 #28A745、含物流追蹤與支付選項］。",
        "exampleCode": "const Store = () => (\n  <div className='bg-green-500'><h1>商品</h1></div>\n);",
        "applicationScenarios": ["零代碼商店", "訂單管理", "物流追踪"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 50,
        "title": "線上醫療預約系統",
        "level": "intermediate",
        "category": "Healthcare",
        "slug": "online-medical-booking-system",
        "keywords": ["React", "React Hook Form", "醫療"],
        "description": "打造醫療預約系統，如夜市攞販的數位掛號站。",
        "prompt": "【零代碼提示 🚀】使用 React 和 React Hook Form，依據條例生成醫療預約程式碼：1. 預約流程；2. 醫生排班；3. 提醒通知。貼上需求：［條例描述，例如：藍色調 #4169E1、含時間選擇器與簡訊通知］。",
        "exampleCode": "import { useForm } from 'react-hook-form';\nconst Medical = () => {\n  const { register, handleSubmit } = useForm();\n  return <form onSubmit={handleSubmit(data => console.log(data))} className='bg-blue-600'><input type='time' {...register('time')} /></form>;\n};",
        "applicationScenarios": ["醫療預約", "醫生排班", "患者通知"],
        "lastUpdated": "2025-03-01"
      }
    ]
  },
  "functionality": {
    "overview": "為開發者提供 50 個主流技術的功能協助，根據具體需求實現應用，從基礎優化到進階整合。",
    "recommendedFor": {
      "beginner": [1, 11, 25],
      "intermediate": [2, 7, 17],
      "advanced": [4, 8, 14]
    },
    "items": [
      {
        "number": 1,
        "title": "實現 React 組件狀態管理",
        "level": "beginner",
        "category": "React",
        "slug": "react-component-state-management",
        "keywords": ["React", "useState", "狀態管理", "基礎"],
        "description": "React 狀態管理如夜市攞販的訂單簿，記錄與更新動態數據。",
        "prompt": "【功能應用】我需要使用 React 的 useState 實現組件狀態管理。請根據我的需求協助完成：［請描述您的具體需求，如 '實現一個點擊計數器'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 React 組件程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望計數器即時更新'）"
        ],
        "exampleCode": "import React, { useState } from 'react';\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n  return <button onClick={() => setCount(count + 1)}>{count}</button>;\n};",
        "applicationScenarios": ["點擊計數器", "表單輸入", "簡單交互"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 2,
        "title": "優化 Vite 打包效能",
        "level": "intermediate",
        "category": "Build Tools",
        "slug": "vite-bundle-optimization",
        "keywords": ["Vite", "打包", "效能", "前端開發"],
        "description": "Vite 優化如夜市攞販的高效打包機，提升構建速度。",
        "prompt": "【功能應用】我需要使用 Vite 優化前端打包效能。請根據我的需求協助完成：［請描述您的具體需求，如 '減少打包後的文件大小'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Vite 配置文件（vite.config.js）",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望打包大小低於 300KB'）"
        ],
        "exampleCode": "export default { build: { rollupOptions: { output: { manualChunks: { vendor: ['react'] } } } } };",
        "applicationScenarios": ["大型應用打包", "快速部署", "效能優化"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 3,
        "title": "實現 Astro 靜態頁面生成",
        "level": "intermediate",
        "category": "Frameworks",
        "slug": "astro-static-page-generation",
        "keywords": ["Astro", "靜態頁面", "生成", "SEO"],
        "description": "Astro 如夜市攞販的預製攤位，快速生成高效頁面。",
        "prompt": "【功能應用】我需要使用 Astro 實現靜態頁面生成。請根據我的需求協助完成：［請描述您的具體需求，如 '生成含有 React 組件的部落格頁面'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Astro 項目結構與程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望頁面載入低於 1 秒'）"
        ],
        "exampleCode": "---\nimport Layout from '../layouts/Layout.astro';\n---\n<Layout><h1>部落格</h1></Layout>",
        "applicationScenarios": ["部落格頁面", "靜態官網", "SEO 優化頁"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 4,
        "title": "整合 WebAssembly 提升計算效能",
        "level": "advanced",
        "category": "Performance",
        "slug": "webassembly-performance-integration",
        "keywords": ["WebAssembly", "WASM", "高性能", "Rust"],
        "description": "WebAssembly 如夜市攞販的火箭引擎，加速計算任務。",
        "prompt": "【功能應用】我需要整合 WebAssembly 提升計算效能。請根據我的需求協助完成：［請描述您的具體需求，如 '使用 Rust 計算斐波那契數列並整合到 React'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 WebAssembly 模組（.wasm）或源程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望計算速度提升 50%'）"
        ],
        "exampleCode": "import init from './fib.wasm';\nconst wasm = await init();\nconsole.log(wasm.fib(10));",
        "applicationScenarios": ["數學計算工具", "遊戲邏輯", "數據處理"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 5,
        "title": "部署 Serverless API 服務",
        "level": "advanced",
        "category": "Backend",
        "slug": "serverless-api-deployment",
        "keywords": ["Serverless", "AWS Lambda", "API", "雲端"],
        "description": "Serverless 如夜市攞販的自動化廚房，無需伺服器即可運行 API。",
        "prompt": "【功能應用】我需要部署 Serverless API 服務。請根據我的需求協助完成：［請描述您的具體需求，如 '使用 AWS Lambda 實現簡單問候 API'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Lambda 函數程式碼與配置",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望響應時間低於 200ms'）"
        ],
        "exampleCode": "exports.handler = async (event) => {\n  return { statusCode: 200, body: JSON.stringify({ message: 'Hello!' }) };\n};",
        "applicationScenarios": ["問候 API", "數據處理端點", "事件觸發服務"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 6,
        "title": "實現 GraphQL 查詢與快取",
        "level": "intermediate",
        "category": "API",
        "slug": "graphql-query-caching",
        "keywords": ["GraphQL", "查詢", "快取", "Apollo Client"],
        "description": "GraphQL 如夜市攞販的自選菜單，按需索取並快取數據。",
        "prompt": "【功能應用】我需要使用 GraphQL 實現查詢與快取。請根據我的需求協助完成：［請描述您的具體需求，如 '查詢用戶資料並快取結果'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 GraphQL 查詢程式碼與客戶端配置",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望減少重複請求'）"
        ],
        "exampleCode": "import { gql, useQuery } from '@apollo/client';\nconst GET_USER = gql`query { user(id: 1) { name } }`;\nconst User = () => {\n  const { data } = useQuery(GET_USER);\n  return <p>{data?.user.name}</p>;\n};",
        "applicationScenarios": ["用戶資料查詢", "數據快取", "API 優化"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 7,
        "title": "整合 TypeScript 提升 React 穩定性",
        "level": "intermediate",
        "category": "React",
        "slug": "typescript-react-stability",
        "keywords": ["TypeScript", "React", "類型安全", "穩定性"],
        "description": "TypeScript 如夜市攞販的品質保證，提升 React 應用穩定性。",
        "prompt": "【功能應用】我需要整合 TypeScript 到 React 應用以提升穩定性。請根據我的需求協助完成：［請描述您的具體需求，如 '為計數器組件添加類型定義'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 TypeScript 配置（如 tsconfig.json）與程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望消除類型錯誤'）"
        ],
        "exampleCode": "import React, { useState } from 'react';\ninterface Props { initialCount: number; }\nconst Counter: React.FC<Props> = ({ initialCount }) => {\n  const [count, setCount] = useState<number>(initialCount);\n  return <button onClick={() => setCount(count + 1)}>{count}</button>;\n};",
        "applicationScenarios": ["計數器組件", "類型安全應用", "團隊開發"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 8,
        "title": "配置 Docker 容器化前端應用",
        "level": "advanced",
        "category": "DevOps",
        "slug": "docker-frontend-containerization",
        "keywords": ["Docker", "容器化", "前端部署"],
        "description": "Docker 如夜市攞販的標準化攤位，確保前端環境一致。",
        "prompt": "【功能應用】我需要使用 Docker 容器化前端應用。請根據我的需求協助完成：［請描述您的具體需求，如 '容器化 React 應用並運行'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Dockerfile 或應用程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望跨環境一致運行'）"
        ],
        "exampleCode": "FROM node:16\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ['npm', 'start']\n# Build & Run\ndocker build -t react-app .\ndocker run -p 3000:3000 react-app",
        "applicationScenarios": ["應用部署", "環境一致性", "CI/CD 整合"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 9,
        "title": "實現微前端模組通信",
        "level": "advanced",
        "category": "Architecture",
        "slug": "micro-frontend-module-communication",
        "keywords": ["微前端", "模組化", "通信", "React"],
        "description": "微前端模組通信如夜市攞販間的無線對講，實現模組間數據共享。",
        "prompt": "【功能應用】我需要實現微前端模組間的通信。請根據我的需求協助完成：［請描述您的具體需求，如 '在 React 主應用與 Vue 微應用間共享狀態'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的微前端架構程式碼（如主應用與微應用配置）",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望狀態即時同步'）"
        ],
        "exampleCode": "// main-app (React)\nwindow.dispatchEvent(new CustomEvent('stateUpdate', { detail: { count: 1 } }));\n// micro-app (Vue)\nwindow.addEventListener('stateUpdate', e => console.log(e.detail.count));",
        "applicationScenarios": [
          "儀表板模組通信",
          "跨框架狀態共享",
          "微前端整合"
        ],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 10,
        "title": "整合 ChatGPT 實現智能聊天",
        "level": "advanced",
        "category": "AI",
        "slug": "chatgpt-smart-chat-integration",
        "keywords": ["ChatGPT", "React", "智能聊天", "API"],
        "description": "ChatGPT 整合如夜市攞販的智能助手，提供智慧對話功能。",
        "prompt": "【功能應用】我需要整合 ChatGPT API 實現智能聊天功能。請根據我的需求協助完成：［請描述您的具體需求，如 '實現一個即時問答聊天框'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 ChatGPT API 端點與金鑰配置",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望回應時間低於 1 秒'）"
        ],
        "exampleCode": "const Chat = () => {\n  const [response, setResponse] = useState('');\n  const send = async (input) => {\n    const res = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: { 'Authorization': 'Bearer YOUR_API_KEY' },\n      body: JSON.stringify({ prompt: input, max_tokens: 50 })\n    });\n    setResponse((await res.json()).choices[0].text);\n  };\n  return <div><input onKeyPress={e => e.key === 'Enter' && send(e.target.value)} /><p>{response}</p></div>;\n};",
        "applicationScenarios": ["即時客服", "問答系統", "智能助手"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 11,
        "title": "實現 Tailwind CSS 自訂主題",
        "level": "beginner",
        "category": "CSS",
        "slug": "tailwind-css-custom-theme",
        "keywords": ["Tailwind CSS", "自訂主題", "樣式", "設計"],
        "description": "Tailwind CSS 自訂主題如夜市攞販的專屬裝飾，打造獨特風格。",
        "prompt": "【功能應用】我需要使用 Tailwind CSS 實現自訂主題。請根據我的需求協助完成：［請描述您的具體需求，如 '設置暗色模式主題'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Tailwind 配置檔案（tailwind.config.js）",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望切換主題平滑'）"
        ],
        "exampleCode": "// tailwind.config.js\nmodule.exports = {\n  theme: { extend: { colors: { dark: '#1a202c' } } },\n  darkMode: 'class'\n};\n// Component\nconst Theme = () => <div className='bg-dark text-white dark:bg-light dark:text-black'>主題</div>;",
        "applicationScenarios": [
          "暗色模式切換",
          "品牌風格設計",
          "自訂樣式應用"
        ],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 12,
        "title": "配置 Redux Toolkit 狀態同步",
        "level": "intermediate",
        "category": "State Management",
        "slug": "redux-toolkit-state-sync",
        "keywords": ["Redux Toolkit", "狀態管理", "React", "同步"],
        "description": "Redux Toolkit 如夜市攞販的統一訂單系統，同步全局狀態。",
        "prompt": "【功能應用】我需要使用 Redux Toolkit 配置狀態同步。請根據我的需求協助完成：［請描述您的具體需求，如 '同步購物車數據'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Redux store 與 slice 程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望減少重複渲染'）"
        ],
        "exampleCode": "import { configureStore, createSlice } from '@reduxjs/toolkit';\nconst cartSlice = createSlice({ name: 'cart', initialState: [], reducers: { add: (state, action) => [...state, action.payload] } });\nconst store = configureStore({ reducer: { cart: cartSlice.reducer } });\nconst Cart = () => {\n  const items = useSelector(state => state.cart);\n  const dispatch = useDispatch();\n  return <button onClick={() => dispatch(cartSlice.actions.add('item'))}>{items.length}</button>;\n};",
        "applicationScenarios": ["購物車同步", "全局狀態管理", "數據更新"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 13,
        "title": "優化 Next.js SSR 效能",
        "level": "advanced",
        "category": "Frameworks",
        "slug": "nextjs-ssr-optimization",
        "keywords": ["Next.js", "SSR", "效能", "SEO"],
        "description": "Next.js SSR 優化如夜市攞販的預熱烤箱，提升渲染速度與 SEO。",
        "prompt": "【功能應用】我需要優化 Next.js 的伺服器端渲染效能。請根據我的需求協助完成：［請描述您的具體需求，如 '加速產品頁面的 SSR 載入'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Next.js 頁面程式碼與伺服器配置",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望首屏載入低於 1 秒'）"
        ],
        "exampleCode": "// pages/product/[id].js\nexport async function getServerSideProps({ params }) {\n  const data = await fetch(`https://api.example.com/product/${params.id}`).then(res => res.json());\n  return { props: { data } };\n}\nexport default function Product({ data }) {\n  return <div>{data.name}</div>;\n};",
        "applicationScenarios": ["產品頁面加速", "SEO 優化", "動態渲染"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 14,
        "title": "實現 WebRTC 視訊通話",
        "level": "advanced",
        "category": "Communication",
        "slug": "webrtc-video-call",
        "keywords": ["WebRTC", "視訊通話", "即時通信", "P2P"],
        "description": "WebRTC 如夜市攞販的即時視訊喊話，實現點對點通話。",
        "prompt": "【功能應用】我需要使用 WebRTC 實現視訊通話功能。請根據我的需求協助完成：［請描述您的具體需求，如 '實現雙人視訊通話'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 WebRTC 配置與信令服務程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望視訊穩定無延遲'）"
        ],
        "exampleCode": "const VideoCall = () => {\n  const [stream, setStream] = useState(null);\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(s => setStream(s));\n  }, []);\n  return <video ref={video => video && (video.srcObject = stream)} autoPlay />;\n};",
        "applicationScenarios": ["雙人視訊", "線上會議", "遠端協作"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 15,
        "title": "整合 Three.js 實現 3D 動畫",
        "level": "advanced",
        "category": "Visualization",
        "slug": "threejs-3d-animation",
        "keywords": ["Three.js", "3D 動畫", "WebGL", "可視化"],
        "description": "Three.js 如夜市攞販的 3D 立體招牌，打造視覺震撼效果。",
        "prompt": "【功能應用】我需要整合 Three.js 實現 3D 動畫。請根據我的需求協助完成：［請描述您的具體需求，如 '創建旋轉立方體動畫'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Three.js 場景與物件程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望動畫平滑運行'）"
        ],
        "exampleCode": "import * as THREE from 'three';\nconst Cube = () => {\n  const ref = useRef();\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ canvas: ref.current });\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      renderer.render(scene, camera);\n    };\n    animate();\n  }, []);\n  return <canvas ref={ref} width='200' height='200' />;\n};",
        "applicationScenarios": ["產品展示動畫", "遊戲場景", "3D 可視化"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 16,
        "title": "設置 PWA 離線功能",
        "level": "intermediate",
        "category": "Web Development",
        "slug": "pwa-offline-functionality",
        "keywords": ["PWA", "離線", "Service Worker", "漸進式應用"],
        "description": "PWA 離線功能如夜市攞販的備用電源，確保應用隨時可用。",
        "prompt": "【功能應用】我需要設置 PWA 的離線功能。請根據我的需求協助完成：［請描述您的具體需求，如 '實現簡單頁面的離線訪問'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Service Worker 程式碼與 manifest 配置",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望離線時顯示緩存頁面'）"
        ],
        "exampleCode": "// sw.js\nself.addEventListener('install', event => {\n  event.waitUntil(caches.open('v1').then(cache => cache.addAll(['/', '/index.html'])));\n});\nself.addEventListener('fetch', event => {\n  event.respondWith(caches.match(event.request).then(res => res || fetch(event.request)));\n});\n// manifest.json\n{\n  \"name\": \"My PWA\",\n  \"start_url\": \"/\",\n  \"display\": \"standalone\"\n}",
        "applicationScenarios": ["離線網頁", "漸進式應用", "行動體驗優化"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 17,
        "title": "撰寫 Jest 組件測試用例",
        "level": "intermediate",
        "category": "Testing",
        "slug": "jest-component-testing",
        "keywords": ["Jest", "測試", "React", "單元測試"],
        "description": "Jest 測試如夜市攞販的質檢員，確保組件功能正常。",
        "prompt": "【功能應用】我需要使用 Jest 撰寫 React 組件的測試用例。請根據我的需求協助完成：［請描述您的具體需求，如 '測試按鈕點擊事件'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的組件程式碼與測試檔案",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望測試覆蓋率達 90%'）"
        ],
        "exampleCode": "// Button.js\nconst Button = ({ onClick }) => <button onClick={onClick}>點我</button>;\n// Button.test.js\nimport { render, fireEvent } from '@testing-library/react';\ntest('點擊觸發', () => {\n  const handleClick = jest.fn();\n  const { getByText } = render(<Button onClick={handleClick} />);\n  fireEvent.click(getByText('點我'));\n  expect(handleClick).toHaveBeenCalled();\n});",
        "applicationScenarios": ["按鈕測試", "組件功能驗證", "單元測試"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 18,
        "title": "實現 Cypress 表單測試",
        "level": "intermediate",
        "category": "Testing",
        "slug": "cypress-form-testing",
        "keywords": ["Cypress", "表單測試", "E2E", "自動化"],
        "description": "Cypress 表單測試如夜市攞販模擬顧客填單，確保表單流程無誤。",
        "prompt": "【功能應用】我需要使用 Cypress 測試表單功能。請根據我的需求協助完成：［請描述您的具體需求，如 '測試登入表單提交'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的表單程式碼與 Cypress 測試腳本",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望模擬真實提交行為'）"
        ],
        "exampleCode": "// cypress/integration/login.spec.js\ndescribe('登入表單', () => {\n  it('應成功提交', () => {\n    cy.visit('/login');\n    cy.get('#username').type('user');\n    cy.get('#password').type('pass');\n    cy.get('button').click();\n    cy.url().should('include', '/dashboard');\n  });\n});",
        "applicationScenarios": ["登入表單測試", "表單流程驗證", "E2E 測試"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 19,
        "title": "配置 Web Workers 進行數據處理",
        "level": "advanced",
        "category": "Performance",
        "slug": "web-workers-data-processing",
        "keywords": ["Web Workers", "數據處理", "多執行緒", "效能"],
        "description": "Web Workers 如夜市攞販的後台助手，提升數據處理效能。",
        "prompt": "【功能應用】我需要配置 Web Workers 進行數據處理。請根據我的需求協助完成：［請描述您的具體需求，如 '處理大型數組排序'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Web Worker 程式碼與主執行緒邏輯",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望不阻塞主執行緒'）"
        ],
        "exampleCode": "// worker.js\nself.onmessage = e => {\n  const sorted = e.data.sort((a, b) => a - b);\n  self.postMessage(sorted);\n};\n// main.js\nconst worker = new Worker('worker.js');\nworker.postMessage([3, 1, 2]);\nworker.onmessage = e => console.log(e.data);",
        "applicationScenarios": ["數據排序", "圖像處理", "背景計算"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 20,
        "title": "實現 Svelte 動態組件",
        "level": "intermediate",
        "category": "Frameworks",
        "slug": "svelte-dynamic-components",
        "keywords": ["Svelte", "動態組件", "輕量框架", "響應式"],
        "description": "Svelte 動態組件如夜市攞販的靈活攤位，快速打造交互介面。",
        "prompt": "【功能應用】我需要使用 Svelte 實現動態組件。請根據我的需求協助完成：［請描述您的具體需求，如 '實現計數器組件'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Svelte 組件程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望組件輕量高效'）"
        ],
        "exampleCode": "<script>\n  let count = 0;\n</script>\n<button on:click={() => count += 1}>{count}</button>",
        "applicationScenarios": ["計數器應用", "動態介面", "輕量組件"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 21,
        "title": "整合 React Native 推送通知",
        "level": "intermediate",
        "category": "Mobile",
        "slug": "react-native-push-notifications",
        "keywords": ["React Native", "推送通知", "移動應用"],
        "description": "React Native 推送通知如夜市攞販的即時廣播，提醒用戶。",
        "prompt": "【功能應用】我需要整合 React Native 推送通知。請根據我的需求協助完成：［請描述您的具體需求，如 '實現本地推送通知'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 React Native 程式碼與通知配置",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望通知定時觸發'）"
        ],
        "exampleCode": "import PushNotification from 'react-native-push-notification';\nconst Notify = () => {\n  PushNotification.localNotification({ message: '提醒！' });\n  return <Button title='通知' onPress={() => PushNotification.localNotification({ message: 'Hello' })} />;\n};",
        "applicationScenarios": ["本地提醒", "推送消息", "應用通知"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 22,
        "title": "配置 Electron 檔案存取",
        "level": "advanced",
        "category": "Desktop",
        "slug": "electron-file-access",
        "keywords": ["Electron", "檔案存取", "桌面應用"],
        "description": "Electron 檔案存取如夜市攞販的檔案櫃，管理本地數據。",
        "prompt": "【功能應用】我需要配置 Electron 實現檔案存取。請根據我的需求協助完成：［具體需求，如 '讀取本地文本檔案'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Electron 主進程與渲染進程程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望讀取檔案快速'）"
        ],
        "exampleCode": "// main.js\nconst { ipcMain } = require('electron');\nconst fs = require('fs');\nipcMain.on('read-file', (event, path) => event.reply('file-content', fs.readFileSync(path, 'utf8')));\n// renderer.js\nconst { ipcRenderer } = require('electron');\nconst File = () => {\n  ipcRenderer.invoke('read-file', 'file.txt').then(content => console.log(content));\n  return <button onClick={() => ipcRenderer.send('read-file', 'file.txt')}>讀取</button>;\n};",
        "applicationScenarios": ["檔案管理", "桌面應用", "本地數據處理"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 23,
        "title": "優化 Webpack 資源分包",
        "level": "intermediate",
        "category": "Build Tools",
        "slug": "webpack-resource-splitting",
        "keywords": ["Webpack", "資源分包", "效能", "打包"],
        "description": "Webpack 資源分包如夜市攞販的打包分區，提升載入效率。",
        "prompt": "【功能應用】我需要優化 Webpack 實現資源分包。請根據我的需求協助完成：［請描述您的具體需求，如 '分離 React 與第三方庫'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Webpack 配置文件（webpack.config.js）",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望減少首屏載入大小'）"
        ],
        "exampleCode": "module.exports = {\n  optimization: {\n    splitChunks: {\n      chunks: 'all',\n      cacheGroups: {\n        vendor: { test: /[\\/]node_modules[\\/]/, name: 'vendors', chunks: 'all' }\n      }\n    }\n  }\n};",
        "applicationScenarios": ["大型應用分包", "首屏優化", "資源管理"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 24,
        "title": "設置 Babel Polyfill 相容性",
        "level": "intermediate",
        "category": "Build Tools",
        "slug": "babel-polyfill-compatibility",
        "keywords": ["Babel", "Polyfill", "相容性", "ES6"],
        "description": "Babel Polyfill 如夜市攞販的適配器，確保舊瀏覽器支援新功能。",
        "prompt": "【功能應用】我需要設置 Babel Polyfill 提升瀏覽器相容性。請根據我的需求協助完成：［請描述您的具體需求，如 '支援 IE11 的 Promise'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Babel 配置檔案（.babelrc 或 babel.config.js）",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望 IE11 正常運行'）"
        ],
        "exampleCode": "// .babelrc\n{\n  \"presets\": [\"@babel/preset-env\", { \"targets\": { \"ie\": \"11\" } }],\n  \"plugins\": [\"@babel/plugin-transform-runtime\"]\n}\n// index.js\nimport '@babel/polyfill';\nPromise.resolve('test').then(console.log);",
        "applicationScenarios": ["舊瀏覽器支援", "ES6 相容性", "跨平台應用"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 25,
        "title": "配置 ESLint 與 Prettier 規範",
        "level": "beginner",
        "category": "Tools",
        "slug": "eslint-prettier-config",
        "keywords": ["ESLint", "Prettier", "程式碼規範", "品質"],
        "description": "ESLint 與 Prettier 如夜市攞販的質檢與美化員，確保程式碼整潔。",
        "prompt": "【功能應用】我需要配置 ESLint 與 Prettier 實現程式碼規範。請根據我的需求協助完成：［請描述您的具體需求，如 '規範 React 組件程式碼'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 ESLint 與 Prettier 配置文件（.eslintrc 和 .prettierrc）",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望統一縮進與分號'）"
        ],
        "exampleCode": "// .eslintrc.json\n{\n  \"extends\": [\"plugin:react/recommended\", \"plugin:prettier/recommended\"],\n  \"rules\": { \"semi\": [\"error\", \"always\"] }\n}\n// .prettierrc\n{\n  \"semi\": true,\n  \"tabWidth\": 2\n}\n// Component.js\nconst MyComponent = () => <div>Hello;</div>;",
        "applicationScenarios": ["程式碼規範", "團隊協作", "品質檢查"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 26,
        "title": "實現 Git 分支管理流程",
        "level": "intermediate",
        "category": "Tools",
        "slug": "git-branch-management",
        "keywords": ["Git", "分支管理", "版本控制", "協作"],
        "description": "Git 分支管理如夜市攞販的多線作業，協調版本變更。",
        "prompt": "【功能應用】我需要實現 Git 分支管理流程。請根據我的需求協助完成：［請描述您的具體需求，如 '設置功能分支與合併流程'］。請提供您的命令或配置：［請在此處貼上命令或配置］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Git 分支結構與命令歷史",
          "目前版本控制的狀態",
          "您遇到的問題或期望的結果（如 '希望合併無衝突'）"
        ],
        "exampleCode": "git checkout -b feature/new\n# 開發完成\ngit add .\ngit commit -m '新增功能'\ngit checkout main\ngit merge feature/new\ngit push origin main",
        "applicationScenarios": ["功能分支開發", "團隊協作", "版本管理"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 27,
        "title": "配置 npm 腳本自動化",
        "level": "intermediate",
        "category": "Tools",
        "slug": "npm-script-automation",
        "keywords": ["npm", "腳本", "自動化", "依賴管理"],
        "description": "npm 腳本自動化如夜市攞販的自動化工具，提升開發效率。",
        "prompt": "【功能應用】我需要配置 npm 腳本實現自動化流程。請根據我的需求協助完成：［請描述您的具體需求，如 '設置構建與測試腳本'］。請提供您的 package.json：［請在此處貼上 package.json］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 package.json 檔案",
          "目前腳本配置狀態",
          "您遇到的問題或期望的結果（如 '希望一鍵運行測試與構建'）"
        ],
        "exampleCode": "// package.json\n{\n  \"scripts\": {\n    \"build\": \"webpack --mode production\",\n    \"test\": \"jest\",\n    \"start\": \"npm run build && npm run test\"\n  }\n}",
        "applicationScenarios": ["構建自動化", "測試流程", "開發腳本"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 28,
        "title": "優化 Yarn Workspace 依賴",
        "level": "intermediate",
        "category": "Tools",
        "slug": "yarn-workspace-dependency-optimization",
        "keywords": ["Yarn", "Workspace", "依賴管理", "效能"],
        "description": "Yarn Workspace 如夜市攞販的多攤位管理，優化依賴共享。",
        "prompt": "【功能應用】我需要優化 Yarn Workspace 的依賴管理。請根據我的需求協助完成：［請描述您的具體需求，如 '共享多項目間的 React 依賴'］。請提供您的配置：［請在此處貼上 yarn.lock 或 package.json］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Yarn Workspace 配置與 package.json",
          "目前依賴管理的狀態",
          "您遇到的問題或期望的結果（如 '希望減少重複依賴'）"
        ],
        "exampleCode": "// package.json (root)\n{\n  \"private\": true,\n  \"workspaces\": [\"packages/*\"]\n}\n// packages/app/package.json\n{\n  \"dependencies\": { \"react\": \"^18.0.0\" }\n}",
        "applicationScenarios": ["多項目依賴共享", "大型專案管理", "效能優化"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 29,
        "title": "實現 Rollup 模組輸出",
        "level": "intermediate",
        "category": "Build Tools",
        "slug": "rollup-module-output",
        "keywords": ["Rollup", "模組輸出", "打包", "輕量"],
        "description": "Rollup 模組輸出如夜市攞販的輕便打包機，生成高效庫。",
        "prompt": "【功能應用】我需要使用 Rollup 實現模組輸出。請根據我的需求協助完成：［請描述您的具體需求，如 '打包一個工具函式庫'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Rollup 配置文件（rollup.config.js）",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望輸出 ESM 與 CJS 格式'）"
        ],
        "exampleCode": "// rollup.config.js\nimport commonjs from '@rollup/plugin-commonjs';\nexport default {\n  input: 'src/index.js',\n  output: [{ file: 'dist/index.esm.js', format: 'esm' }, { file: 'dist/index.cjs.js', format: 'cjs' }],\n  plugins: [commonjs()]\n};\n// src/index.js\nexport const add = (a, b) => a + b;",
        "applicationScenarios": ["工具函式庫", "模組打包", "開源項目"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 30,
        "title": "整合 Vue.js 動態路由",
        "level": "intermediate",
        "category": "Frameworks",
        "slug": "vuejs-dynamic-routing",
        "keywords": ["Vue.js", "動態路由", "導航", "響應式"],
        "description": "Vue.js 動態路由如夜市攞販的靈活導覽圖，實現頁面切換。",
        "prompt": "【功能應用】我需要整合 Vue.js 實現動態路由。請根據我的需求協助完成：［請描述您的具體需求，如 '根據 ID 顯示產品頁面'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Vue Router 配置與組件程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望路由參數正確傳遞'）"
        ],
        "exampleCode": "import Vue from 'vue';\nimport Router from 'vue-router';\nVue.use(Router);\nconst router = new Router({\n  routes: [{ path: '/product/:id', component: { template: '<div>產品 {{ $route.params.id }}</div>' } }]\n});\nnew Vue({ router }).$mount('#app');",
        "applicationScenarios": ["產品頁面切換", "動態導航", "單頁應用"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 31,
        "title": "實現 D3.js 動態圖表",
        "level": "advanced",
        "category": "Visualization",
        "slug": "d3js-dynamic-charts",
        "keywords": ["D3.js", "動態圖表", "可視化", "數據"],
        "description": "D3.js 動態圖表如夜市攞販的即時數據看板，展示生動數據。",
        "prompt": "【功能應用】我需要使用 D3.js 實現動態圖表。請根據我的需求協助完成：［請描述您的具體需求，如 '創建即時更新的柱狀圖'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 D3.js 程式碼與數據結構",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望圖表即時更新'）"
        ],
        "exampleCode": "import * as d3 from 'd3';\nconst Chart = () => {\n  const ref = useRef();\n  useEffect(() => {\n    const svg = d3.select(ref.current);\n    const update = () => svg.selectAll('rect').data([10, 20, 30]).enter().append('rect').attr('width', d => d * 5).attr('height', 20).attr('y', (d, i) => i * 25);\n    setInterval(update, 1000);\n  }, []);\n  return <svg ref={ref} width='200' height='100' />;\n};",
        "applicationScenarios": ["即時數據展示", "動態報表", "可視化分析"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 32,
        "title": "配置 WebGPU 圖形渲染",
        "level": "advanced",
        "category": "Performance",
        "slug": "webgpu-graphics-rendering",
        "keywords": ["WebGPU", "圖形渲染", "高效能", "WebGL"],
        "description": "WebGPU 如夜市攞販的高效能烤爐，提升圖形渲染速度。",
        "prompt": "【功能應用】我需要配置 WebGPU 實現圖形渲染。請根據我的需求協助完成：［請描述您的具體需求，如 '渲染簡單三角形'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 WebGPU 配置與渲染程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望幀率達 60fps'）"
        ],
        "exampleCode": "const canvas = document.createElement('canvas');\nconst adapter = await navigator.gpu.requestAdapter();\nconst device = await adapter.requestDevice();\nconst context = canvas.getContext('webgpu');\ncontext.configure({ device, format: 'bgra8unorm' });",
        "applicationScenarios": ["遊戲渲染", "3D 可視化", "高效圖形處理"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 33,
        "title": "實現 Playwright 多瀏覽器測試",
        "level": "advanced",
        "category": "Testing",
        "slug": "playwright-multi-browser-testing",
        "keywords": ["Playwright", "多瀏覽器", "測試", "E2E"],
        "description": "Playwright 多瀏覽器測試如夜市攞販的多功能試吃員，確保跨瀏覽器兼容性。",
        "prompt": "【功能應用】我需要使用 Playwright 實現多瀏覽器測試。請根據我的需求協助完成：［請描述您的具體需求，如 '測試 Chrome 與 Firefox 的登入流程'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Playwright 測試腳本",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望測試穩定通過'）"
        ],
        "exampleCode": "const { chromium, firefox } = require('playwright');\n(async () => {\n  for (const browserType of [chromium, firefox]) {\n    const browser = await browserType.launch();\n    const page = await browser.newPage();\n    await page.goto('http://example.com/login');\n    await page.fill('#username', 'user');\n    await browser.close();\n  }\n})();",
        "applicationScenarios": ["跨瀏覽器測試", "E2E 驗證", "應用兼容性"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 34,
        "title": "整合 Zustand 輕量狀態",
        "level": "intermediate",
        "category": "State Management",
        "slug": "zustand-lightweight-state",
        "keywords": ["Zustand", "狀態管理", "React", "輕量"],
        "description": "Zustand 如夜市攞販的輕便記帳本，簡單管理狀態。",
        "prompt": "【功能應用】我需要整合 Zustand 實現輕量狀態管理。請根據我的需求協助完成：［請描述您的具體需求，如 '管理主題切換狀態'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Zustand store 程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望簡單易維護'）"
        ],
        "exampleCode": "import create from 'zustand';\nconst useStore = create(set => ({ theme: 'light', toggleTheme: () => set(state => ({ theme: state.theme === 'light' ? 'dark' : 'light' })) }));\nconst Theme = () => {\n  const { theme, toggleTheme } = useStore();\n  return <button onClick={toggleTheme}>{theme}</button>;\n};",
        "applicationScenarios": ["主題切換", "輕量狀態", "簡單應用"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 35,
        "title": "實現 Recoil 複雜狀態同步",
        "level": "intermediate",
        "category": "State Management",
        "slug": "recoil-complex-state-sync",
        "keywords": ["Recoil", "狀態管理", "React", "複雜狀態"],
        "description": "Recoil 如夜市攞販的精密倉庫，管理複雜狀態同步。",
        "prompt": "【功能應用】我需要使用 Recoil 實現複雜狀態同步。請根據我的需求協助完成：［請描述您的具體需求，如 '同步用戶與訂單數據'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Recoil atom 與 selector 程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望狀態高效同步'）"
        ],
        "exampleCode": "import { atom, selector, useRecoilState } from 'recoil';\nconst userState = atom({ key: 'user', default: { name: '' } });\nconst Order = () => {\n  const [user, setUser] = useRecoilState(userState);\n  return <input value={user.name} onChange={e => setUser({ ...user, name: e.target.value })} />;\n};",
        "applicationScenarios": ["用戶訂單同步", "複雜狀態管理", "數據共享"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 36,
        "title": "配置 Socket.io 聊天室",
        "level": "intermediate",
        "category": "Communication",
        "slug": "socketio-chat-room",
        "keywords": ["Socket.io", "聊天室", "即時通信", "WebSocket"],
        "description": "Socket.io 聊天室如夜市攞販的即時喊話區，實現多人通訊。",
        "prompt": "【功能應用】我需要配置 Socket.io 實現聊天室功能。請根據我的需求協助完成：［請描述您的具體需求，如 '實現多人即時聊天'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Socket.io 前後端程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望訊息即時送達'）"
        ],
        "exampleCode": "// server.js\nconst io = require('socket.io')(3000);\nio.on('connection', socket => socket.on('chat', msg => io.emit('chat', msg)));\n// client.js\nimport io from 'socket.io-client';\nconst Chat = () => {\n  const socket = io('http://localhost:3000');\n  const [msgs, setMsgs] = useState([]);\n  useEffect(() => { socket.on('chat', msg => setMsgs(m => [...m, msg])); }, []);\n  return <div>{msgs.map(m => <p>{m}</p>)}</div>;\n};",
        "applicationScenarios": ["多人聊天", "即時通知", "社群互動"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 37,
        "title": "實現 Firebase 實時更新",
        "level": "intermediate",
        "category": "Backend",
        "slug": "firebase-realtime-update",
        "keywords": ["Firebase", "實時更新", "數據同步", "雲端"],
        "description": "Firebase 實時更新如夜市攞販的即時訂單簿，保持數據新鮮。",
        "prompt": "【功能應用】我需要使用 Firebase 實現實時數據更新。請根據我的需求協助完成：［請描述您的具體需求，如 '實時更新待辦清單'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Firebase 配置與程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望數據即時同步'）"
        ],
        "exampleCode": "import { getFirestore, collection, onSnapshot } from 'firebase/firestore';\nconst Todos = () => {\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    const db = getFirestore();\n    onSnapshot(collection(db, 'todos'), snap => setTodos(snap.docs.map(doc => doc.data())));\n  }, []);\n  return <div>{todos.map(t => <p>{t.task}</p>)}</div>;\n};",
        "applicationScenarios": ["待辦清單同步", "實時數據展示", "雲端更新"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 38,
        "title": "部署 AWS Amplify 全端應用",
        "level": "advanced",
        "category": "Full Stack",
        "slug": "aws-amplify-full-stack-deployment",
        "keywords": ["AWS Amplify", "全端應用", "雲端", "部署"],
        "description": "AWS Amplify 如夜市攞販的全能工具箱，快速部署全端應用。",
        "prompt": "【功能應用】我需要部署 AWS Amplify 全端應用。請根據我的需求協助完成：［請描述您的具體需求，如 '部署帶認證的 React 應用'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Amplify 配置與程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望快速部署完成'）"
        ],
        "exampleCode": "// Terminal\nnpm install -g @aws-amplify/cli\namplify init\namplify add auth\namplify push\n// App.js\nimport { Amplify, Auth } from 'aws-amplify';\nAmplify.configure({ Auth: { region: 'us-east-1' } });\nconst App = () => {\n  const signIn = async () => await Auth.signIn('user', 'pass');\n  return <button onClick={signIn}>登入</button>;\n};",
        "applicationScenarios": ["帶認證應用", "全端部署", "雲端服務"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 39,
        "title": "整合 Apollo Client 查詢",
        "level": "intermediate",
        "category": "API",
        "slug": "apollo-client-query-integration",
        "keywords": ["Apollo Client", "GraphQL", "查詢", "數據"],
        "description": "Apollo Client 如夜市攞販的快遞員，高效整合 GraphQL 查詢。",
        "prompt": "【功能應用】我需要整合 Apollo Client 實現 GraphQL 查詢。請根據我的需求協助完成：［請描述您的具體需求，如 '查詢產品列表並顯示'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Apollo Client 配置與查詢程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望查詢結果即時更新'）"
        ],
        "exampleCode": "import { ApolloClient, InMemoryCache, ApolloProvider, gql, useQuery } from '@apollo/client';\nconst client = new ApolloClient({ uri: 'http://example.com/graphql', cache: new InMemoryCache() });\nconst GET_PRODUCTS = gql`query { products { name } }`;\nconst Products = () => {\n  const { data } = useQuery(GET_PRODUCTS);\n  return <div>{data?.products.map(p => <p>{p.name}</p>)}</div>;\n};\nconst App = () => <ApolloProvider client={client}><Products /></ApolloProvider>;",
        "applicationScenarios": ["產品列表查詢", "數據獲取", "GraphQL 應用"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 40,
        "title": "實現 Styled-Components 主題切換",
        "level": "intermediate",
        "category": "CSS",
        "slug": "styled-components-theme-switching",
        "keywords": ["Styled-Components", "主題切換", "CSS-in-JS", "React"],
        "description": "Styled-Components 主題切換如夜市攞販的換裝秀，動態調整風格。",
        "prompt": "【功能應用】我需要使用 Styled-Components 實現主題切換。請根據我的需求協助完成：［請描述您的具體需求，如 '實現明暗模式切換'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Styled-Components 程式碼與主題配置",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望主題平滑切換'）"
        ],
        "exampleCode": "import styled, { ThemeProvider } from 'styled-components';\nconst Button = styled.button`background: ${props => props.theme.bg};`;\nconst App = () => {\n  const [theme, setTheme] = useState({ bg: 'white' });\n  return <ThemeProvider theme={theme}><Button onClick={() => setTheme({ bg: theme.bg === 'white' ? 'black' : 'white' })}>切換</Button></ThemeProvider>;\n};",
        "applicationScenarios": ["明暗模式", "動態樣式", "主題設計"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 41,
        "title": "配置 Framer Motion 過渡動畫",
        "level": "intermediate",
        "category": "Animation",
        "slug": "framer-motion-transition-animation",
        "keywords": ["Framer Motion", "過渡動畫", "React", "視覺效果"],
        "description": "Framer Motion 過渡動畫如夜市攞販的燈光漸變，增強視覺流暢性。",
        "prompt": "【功能應用】我需要配置 Framer Motion 實現過渡動畫。請根據我的需求協助完成：［請描述您的具體需求，如 '實現頁面淡入淡出動畫'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Framer Motion 程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望動畫平滑過渡'）"
        ],
        "exampleCode": "import { motion } from 'framer-motion';\nconst Page = () => (\n  <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} transition={{ duration: 0.5 }}>\n    頁面內容\n  </motion.div>\n);",
        "applicationScenarios": ["頁面過渡", "元素淡入", "動態交互"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 42,
        "title": "實現 React Spring 物理效果",
        "level": "advanced",
        "category": "Animation",
        "slug": "react-spring-physics-effects",
        "keywords": ["React Spring", "物理效果", "動畫", "React"],
        "description": "React Spring 物理效果如夜市攞販的彈簧玩具，模擬自然運動。",
        "prompt": "【功能應用】我需要使用 React Spring 實現物理效果動畫。請根據我的需求協助完成：［請描述您的具體需求，如 '實現按鈕彈跳效果'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 React Spring 程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望模擬真實彈簧運動'）"
        ],
        "exampleCode": "import { useSpring, animated } from 'react-spring';\nconst Bounce = () => {\n  const props = useSpring({ to: { transform: 'translateY(0px)' }, from: { transform: 'translateY(-50px)' }, config: { tension: 170, friction: 7 } });\n  return <animated.button style={props}>彈跳</animated.button>;\n};",
        "applicationScenarios": ["按鈕彈跳", "物理動畫", "遊戲交互"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 43,
        "title": "整合 Formik 表單驗證",
        "level": "intermediate",
        "category": "Forms",
        "slug": "formik-form-validation",
        "keywords": ["Formik", "表單驗證", "React", "輸入"],
        "description": "Formik 表單驗證如夜市攞販的訂單檢查，確保數據正確。",
        "prompt": "【功能應用】我需要整合 Formik 實現表單驗證。請根據我的需求協助完成：［請描述您的具體需求，如 '驗證註冊表單的郵件與密碼'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Formik 表單程式碼與驗證邏輯",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望即時顯示錯誤'）"
        ],
        "exampleCode": "import { Formik, Form, Field } from 'formik';\nconst Register = () => (\n  <Formik initialValues={{ email: '', password: '' }} validate={values => {\n    const errors = {};\n    if (!values.email) errors.email = '必填';\n    return errors;\n  }} onSubmit={values => console.log(values)}>\n    <Form><Field name='email' type='email' /><Field name='password' type='password' /><button type='submit'>提交</button></Form>\n  </Formik>\n);",
        "applicationScenarios": ["註冊表單", "輸入驗證", "表單提交"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 44,
        "title": "實現 Ant Design 數據表格",
        "level": "intermediate",
        "category": "UI",
        "slug": "ant-design-data-table",
        "keywords": ["Ant Design", "數據表格", "React", "UI"],
        "description": "Ant Design 數據表格如夜市攞販的數據展示板，清晰呈現資訊。",
        "prompt": "【功能應用】我需要使用 Ant Design 實現數據表格。請根據我的需求協助完成：［請描述您的具體需求，如 '展示用戶列表並支援排序'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Ant Design 表格程式碼與數據結構",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望表格支援分頁'）"
        ],
        "exampleCode": "import { Table } from 'antd';\nconst columns = [{ title: '姓名', dataIndex: 'name', sorter: (a, b) => a.name.localeCompare(b.name) }];\nconst data = [{ key: 1, name: 'John' }];\nconst DataTable = () => <Table columns={columns} dataSource={data} />;",
        "applicationScenarios": ["用戶列表展示", "數據排序", "表格管理"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 45,
        "title": "配置 Material-UI 自訂主題",
        "level": "intermediate",
        "category": "UI",
        "slug": "material-ui-custom-theme",
        "keywords": ["Material-UI", "自訂主題", "React", "UI"],
        "description": "Material-UI 自訂主題如夜市攞販的品牌視覺，統一應用風格。",
        "prompt": "【功能應用】我需要配置 Material-UI 實現自訂主題。請根據我的需求協助完成：［請描述您的具體需求，如 '設置藍色主題與自訂按鈕'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Material-UI 主題配置程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望主題一致應用'）"
        ],
        "exampleCode": "import { createTheme, ThemeProvider } from '@mui/material/styles';\nimport Button from '@mui/material/Button';\nconst theme = createTheme({ palette: { primary: { main: '#1976d2' } } });\nconst App = () => (\n  <ThemeProvider theme={theme}><Button variant='contained'>按鈕</Button></ThemeProvider>\n);",
        "applicationScenarios": ["藍色主題應用", "按鈕設計", "UI 統一性"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 46,
        "title": "實現 RxJS 搜尋過濾",
        "level": "advanced",
        "category": "Data Flow",
        "slug": "rxjs-search-filtering",
        "keywords": ["RxJS", "搜尋過濾", "數據流", "反應式"],
        "description": "RxJS 搜尋過濾如夜市攞販的即時篩選器，處理動態數據流。",
        "prompt": "【功能應用】我需要使用 RxJS 實現搜尋過濾功能。請根據我的需求協助完成：［請描述您的具體需求，如 '實現即時搜尋建議'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 RxJS 程式碼與數據流設計",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望即時更新搜尋結果'）"
        ],
        "exampleCode": "import { fromEvent } from 'rxjs';\nimport { debounceTime, map } from 'rxjs/operators';\nconst Search = () => {\n  const inputRef = useRef();\n  useEffect(() => {\n    fromEvent(inputRef.current, 'input')\n      .pipe(debounceTime(300), map(e => e.target.value))\n      .subscribe(value => console.log(value));\n  }, []);\n  return <input ref={inputRef} />;\n};",
        "applicationScenarios": ["即時搜尋", "數據過濾", "反應式應用"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 47,
        "title": "配置 Storybook 組件展示",
        "level": "intermediate",
        "category": "UI",
        "slug": "storybook-component-showcase",
        "keywords": ["Storybook", "組件展示", "設計系統", "React"],
        "description": "Storybook 如夜市攞販的組件展示櫃，提升設計效率。",
        "prompt": "【功能應用】我需要配置 Storybook 展示 React 組件。請根據我的需求協助完成：［請描述您的具體需求，如 '展示按鈕組件的多種樣式'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 Storybook 配置與組件程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望展示所有樣式變體'）"
        ],
        "exampleCode": "// Button.stories.js\nimport Button from './Button';\nexport default { title: 'Button' };\nexport const Primary = () => <Button variant='primary'>主要</Button>;\nexport const Secondary = () => <Button variant='secondary'>次要</Button>;\n// Terminal\nnpx sb init",
        "applicationScenarios": ["按鈕展示", "設計系統文檔", "組件測試"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 48,
        "title": "實現 CI/CD 自動部署流程",
        "level": "advanced",
        "category": "DevOps",
        "slug": "cicd-auto-deployment",
        "keywords": ["CI/CD", "自動部署", "GitHub Actions", "持續集成"],
        "description": "CI/CD 自動部署如夜市攞販的自動化流水線，提升部署效率。",
        "prompt": "【功能應用】我需要實現 CI/CD 自動部署流程。請根據我的需求協助完成：［請描述您的具體需求，如 '使用 GitHub Actions 部署 React 應用'］。請提供您的配置：［請在此處貼上配置］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 CI/CD 配置文件（如 .github/workflows）",
          "目前配置的實現狀態",
          "您遇到的問題或期望的結果（如 '希望自動部署到 Vercel'）"
        ],
        "exampleCode": "# .github/workflows/deploy.yml\nname: Deploy\non: [push]\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - run: npm install && npm run build\n      - uses: actions/upload-artifact@v2\n        with: { path: build }",
        "applicationScenarios": ["自動部署", "持續集成", "多環境管理"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 49,
        "title": "整合 AI 生成動態 UI",
        "level": "advanced",
        "category": "AI",
        "slug": "ai-dynamic-ui-integration",
        "keywords": ["AI", "動態 UI", "React", "智能設計"],
        "description": "AI 動態 UI 如夜市攞販的智能設計師，根據輸入生成介面。",
        "prompt": "【功能應用】我需要整合 AI 生成動態 UI。請根據我的需求協助完成：［請描述您的具體需求，如 '根據用戶輸入生成卡片佈局'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 AI API 配置與前端程式碼",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望 UI 即時生成'）"
        ],
        "exampleCode": "const DynamicUI = () => {\n  const [layout, setLayout] = useState([]);\n  const generate = async input => {\n    const res = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      body: JSON.stringify({ prompt: `Generate card layout for: ${input}` })\n    });\n    setLayout((await res.json()).choices[0].text.split(','));\n  };\n  return <div><input onKeyPress={e => e.key === 'Enter' && generate(e.target.value)} />{layout.map(l => <div>{l}</div>)}</div>;\n};",
        "applicationScenarios": ["動態卡片生成", "智能佈局", "個性化 UI"],
        "lastUpdated": "2025-03-01"
      },
      {
        "number": 50,
        "title": "實現 Tailwind CSS 響應式佈局",
        "level": "intermediate",
        "category": "CSS",
        "slug": "tailwind-css-responsive-layout",
        "keywords": ["Tailwind CSS", "響應式佈局", "工具類", "設計"],
        "description": "Tailwind CSS 響應式佈局如夜市攞販的萬用攤位，適配多設備。",
        "prompt": "【功能應用】我需要使用 Tailwind CSS 實現響應式佈局。請根據我的需求協助完成：［請描述您的具體需求，如 '設計手機與桌面自適應導航欄'］。請提供您的程式碼：［請在此處貼上程式碼］，我將幫您實現或優化。",
        "requiredInfo": [
          "您的 HTML 結構與 Tailwind 配置",
          "目前程式碼的實現狀態",
          "您遇到的問題或期望的結果（如 '希望手機端垂直排列'）"
        ],
        "exampleCode": "const Nav = () => (\n  <nav className='flex flex-col md:flex-row bg-blue-500 p-4'>\n    <a href='#' className='text-white'>首頁</a>\n    <a href='#' className='text-white'>關於</a>\n  </nav>\n);",
        "applicationScenarios": ["響應式導航", "自適應佈局", "多設備設計"],
        "lastUpdated": "2025-03-01"
      }
    ]
  },
  "integratedExample": {
    "overview": "綜合專案示例，將多項技術串聯，展示完整開發生命週期。",
    "items": [
      {
        "number": 151,
        "title": "電商平台綜合應用",
        "level": "advanced",
        "category": "Full Stack",
        "slug": "ecommerce-integrated-app",
        "keywords": ["React", "Serverless", "GraphQL", "Docker", "電商"],
        "description": "打造一個電商平台，如夜市攞販的全功能商店，串聯前端與後端技術。",
        "prompt": "【功能應用】我需要實現一個電商平台，包含前端展示、API 服務與部署。請根據需求協助完成：1. 使用 React 實現產品頁面；2. 使用 GraphQL 查詢產品數據；3. 使用 Serverless (AWS Lambda) 部署 API；4. 使用 Docker 容器化應用。貼上需求：［條例描述，例如：綠色調 #28A745、含購物車與結帳］。",
        "requiredInfo": [
          "您的前端程式碼（如 React 組件）",
          "您的後端配置（如 Lambda 函數）",
          "目前實現狀態與問題（如 '希望部署無縫運行'）"
        ],
        "exampleCode": "// Frontend (React)\nimport { gql, useQuery } from '@apollo/client';\nconst GET_PRODUCTS = gql`query { products { id, name, price } }`;\nconst Products = () => {\n  const { data } = useQuery(GET_PRODUCTS);\n  return <div className='bg-green-500'>{data?.products.map(p => <p>{p.name} - ${p.price}</p>)}</div>;\n};\n// Backend (Lambda)\nexports.handler = async () => {\n  return { statusCode: 200, body: JSON.stringify([{ id: 1, name: 'Product', price: 10 }]) };\n};\n// Dockerfile\nFROM node:16\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ['npm', 'start']",
        "applicationScenarios": [
          "小型電商平台",
          "產品展示與銷售",
          "全端學習示範"
        ],
        "lastUpdated": "2025-03-01"
      }
    ]
  }
}
